import {
  DayTimeColsSlicer,
  TimeCols,
  TimeColsView,
  buildDayRanges,
  buildSlatMetas,
  buildTimeColsModel,
  main_default as main_default2
} from "./chunk-HXDELUUU.js";
import {
  DayTableSlicer,
  Table,
  TableView,
  buildDayTableModel,
  main_default
} from "./chunk-R3Z6DTY6.js";
import {
  BaseComponent,
  CalendarApi,
  DateComponent,
  EventApi,
  Fragment,
  NowTimer,
  RenderHook,
  Splitter,
  TableDateCell,
  TableDowCell,
  ViewContextType,
  __assign,
  __extends,
  __spreadArray,
  addDays,
  combineEventUis,
  compareByFieldSpecs,
  computeFallbackHeaderFormat,
  config,
  createElement,
  createEventUi,
  createPlugin,
  createRef,
  filterHash,
  flexibleCompare,
  formatDayString,
  guid,
  identity,
  isPropsEqual,
  isPropsValid,
  isValidDate,
  mapHash,
  memoize,
  mergeEventStores,
  parseBusinessHours,
  parseClassNames,
  parseFieldSpecs,
  rangesEqual,
  rangesIntersect,
  refineProps,
  requestJson,
  unpromisify
} from "./chunk-54NGRFUI.js";
import "./chunk-S5KM4IGW.js";

// node_modules/@fullcalendar/resource-timegrid/node_modules/@fullcalendar/premium-common/main.js
var RELEASE_DATE = "2023-05-08";
var UPGRADE_WINDOW = 365 + 7;
var INVALID_LICENSE_URL = "http://fullcalendar.io/docs/schedulerLicenseKey#invalid";
var OUTDATED_LICENSE_URL = "http://fullcalendar.io/docs/schedulerLicenseKey#outdated";
var PRESET_LICENSE_KEYS = [
  "GPL-My-Project-Is-Open-Source",
  "CC-Attribution-NonCommercial-NoDerivatives"
];
var CSS = {
  position: "absolute",
  zIndex: 99999,
  bottom: "1px",
  left: "1px",
  background: "#eee",
  borderColor: "#ddd",
  borderStyle: "solid",
  borderWidth: "1px 1px 0 0",
  padding: "2px 4px",
  fontSize: "12px",
  borderTopRightRadius: "3px"
};
function buildLicenseWarning(context) {
  var key = context.options.schedulerLicenseKey;
  var currentUrl = typeof window !== "undefined" ? window.location.href : "";
  if (!isImmuneUrl(currentUrl)) {
    var status_1 = processLicenseKey(key);
    if (status_1 !== "valid") {
      return createElement("div", { className: "fc-license-message", style: CSS }, status_1 === "outdated" ? createElement(
        Fragment,
        null,
        "Your license key is too old to work with this version. ",
        createElement("a", { href: OUTDATED_LICENSE_URL }, "More Info")
      ) : createElement(
        Fragment,
        null,
        "Your license key is invalid. ",
        createElement("a", { href: INVALID_LICENSE_URL }, "More Info")
      ));
    }
  }
  return null;
}
function processLicenseKey(key) {
  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {
    return "valid";
  }
  var parts = (key || "").match(/^(\d+)-fcs-(\d+)$/);
  if (parts && parts[1].length === 10) {
    var purchaseDate = new Date(parseInt(parts[2], 10) * 1e3);
    var releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE);
    if (isValidDate(releaseDate)) {
      var minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW);
      if (minPurchaseDate < purchaseDate) {
        return "valid";
      }
      return "outdated";
    }
  }
  return "invalid";
}
function isImmuneUrl(url) {
  return /\w+:\/\/fullcalendar\.io\/|\/examples\/[\w-]+\.html$/.test(url);
}
var OPTION_REFINERS = {
  schedulerLicenseKey: String
};
var main = createPlugin({
  optionRefiners: OPTION_REFINERS,
  viewContainerAppends: [buildLicenseWarning]
});
var main_default3 = main;

// node_modules/@fullcalendar/resource-common/node_modules/@fullcalendar/premium-common/main.js
var RELEASE_DATE2 = "2023-05-08";
var UPGRADE_WINDOW2 = 365 + 7;
var INVALID_LICENSE_URL2 = "http://fullcalendar.io/docs/schedulerLicenseKey#invalid";
var OUTDATED_LICENSE_URL2 = "http://fullcalendar.io/docs/schedulerLicenseKey#outdated";
var PRESET_LICENSE_KEYS2 = [
  "GPL-My-Project-Is-Open-Source",
  "CC-Attribution-NonCommercial-NoDerivatives"
];
var CSS2 = {
  position: "absolute",
  zIndex: 99999,
  bottom: "1px",
  left: "1px",
  background: "#eee",
  borderColor: "#ddd",
  borderStyle: "solid",
  borderWidth: "1px 1px 0 0",
  padding: "2px 4px",
  fontSize: "12px",
  borderTopRightRadius: "3px"
};
function buildLicenseWarning2(context) {
  var key = context.options.schedulerLicenseKey;
  var currentUrl = typeof window !== "undefined" ? window.location.href : "";
  if (!isImmuneUrl2(currentUrl)) {
    var status_1 = processLicenseKey2(key);
    if (status_1 !== "valid") {
      return createElement("div", { className: "fc-license-message", style: CSS2 }, status_1 === "outdated" ? createElement(
        Fragment,
        null,
        "Your license key is too old to work with this version. ",
        createElement("a", { href: OUTDATED_LICENSE_URL2 }, "More Info")
      ) : createElement(
        Fragment,
        null,
        "Your license key is invalid. ",
        createElement("a", { href: INVALID_LICENSE_URL2 }, "More Info")
      ));
    }
  }
  return null;
}
function processLicenseKey2(key) {
  if (PRESET_LICENSE_KEYS2.indexOf(key) !== -1) {
    return "valid";
  }
  var parts = (key || "").match(/^(\d+)-fcs-(\d+)$/);
  if (parts && parts[1].length === 10) {
    var purchaseDate = new Date(parseInt(parts[2], 10) * 1e3);
    var releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE2);
    if (isValidDate(releaseDate)) {
      var minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW2);
      if (minPurchaseDate < purchaseDate) {
        return "valid";
      }
      return "outdated";
    }
  }
  return "invalid";
}
function isImmuneUrl2(url) {
  return /\w+:\/\/fullcalendar\.io\/|\/examples\/[\w-]+\.html$/.test(url);
}
var OPTION_REFINERS2 = {
  schedulerLicenseKey: String
};
var main2 = createPlugin({
  optionRefiners: OPTION_REFINERS2,
  viewContainerAppends: [buildLicenseWarning2]
});
var main_default4 = main2;

// node_modules/@fullcalendar/resource-common/main.js
function massageEventDragMutation(eventMutation, hit0, hit1) {
  var resource0 = hit0.dateSpan.resourceId;
  var resource1 = hit1.dateSpan.resourceId;
  if (resource0 && resource1 && resource0 !== resource1) {
    eventMutation.resourceMutation = {
      matchResourceId: resource0,
      setResourceId: resource1
    };
  }
}
function applyEventDefMutation(eventDef, mutation, context) {
  var resourceMutation = mutation.resourceMutation;
  if (resourceMutation && computeResourceEditable(eventDef, context)) {
    var index = eventDef.resourceIds.indexOf(resourceMutation.matchResourceId);
    if (index !== -1) {
      var resourceIds = eventDef.resourceIds.slice();
      resourceIds.splice(index, 1);
      if (resourceIds.indexOf(resourceMutation.setResourceId) === -1) {
        resourceIds.push(resourceMutation.setResourceId);
      }
      eventDef.resourceIds = resourceIds;
    }
  }
}
function computeResourceEditable(eventDef, context) {
  var resourceEditable = eventDef.resourceEditable;
  if (resourceEditable == null) {
    var source = eventDef.sourceId && context.getCurrentData().eventSources[eventDef.sourceId];
    if (source) {
      resourceEditable = source.extendedProps.resourceEditable;
    }
    if (resourceEditable == null) {
      resourceEditable = context.options.eventResourceEditable;
      if (resourceEditable == null) {
        resourceEditable = context.options.editable;
      }
    }
  }
  return resourceEditable;
}
function transformEventDrop(mutation, context) {
  var resourceMutation = mutation.resourceMutation;
  if (resourceMutation) {
    var calendarApi = context.calendarApi;
    return {
      oldResource: calendarApi.getResourceById(resourceMutation.matchResourceId),
      newResource: calendarApi.getResourceById(resourceMutation.setResourceId)
    };
  }
  return {
    oldResource: null,
    newResource: null
  };
}
var ResourceDataAdder = function() {
  function ResourceDataAdder2() {
    this.filterResources = memoize(filterResources);
  }
  ResourceDataAdder2.prototype.transform = function(viewProps, calendarProps) {
    if (calendarProps.viewSpec.optionDefaults.needsResourceData) {
      return {
        resourceStore: this.filterResources(calendarProps.resourceStore, calendarProps.options.filterResourcesWithEvents, calendarProps.eventStore, calendarProps.dateProfile.activeRange),
        resourceEntityExpansions: calendarProps.resourceEntityExpansions
      };
    }
    return null;
  };
  return ResourceDataAdder2;
}();
function filterResources(resourceStore, doFilterResourcesWithEvents, eventStore, activeRange) {
  if (doFilterResourcesWithEvents) {
    var instancesInRange = filterEventInstancesInRange(eventStore.instances, activeRange);
    var hasEvents_1 = computeHasEvents(instancesInRange, eventStore.defs);
    __assign(hasEvents_1, computeAncestorHasEvents(hasEvents_1, resourceStore));
    return filterHash(resourceStore, function(resource, resourceId) {
      return hasEvents_1[resourceId];
    });
  }
  return resourceStore;
}
function filterEventInstancesInRange(eventInstances, activeRange) {
  return filterHash(eventInstances, function(eventInstance) {
    return rangesIntersect(eventInstance.range, activeRange);
  });
}
function computeHasEvents(eventInstances, eventDefs) {
  var hasEvents = {};
  for (var instanceId in eventInstances) {
    var instance = eventInstances[instanceId];
    for (var _i = 0, _a = eventDefs[instance.defId].resourceIds; _i < _a.length; _i++) {
      var resourceId = _a[_i];
      hasEvents[resourceId] = true;
    }
  }
  return hasEvents;
}
function computeAncestorHasEvents(hasEvents, resourceStore) {
  var res = {};
  for (var resourceId in hasEvents) {
    var resource = void 0;
    while (resource = resourceStore[resourceId]) {
      resourceId = resource.parentId;
      if (resourceId) {
        res[resourceId] = true;
      } else {
        break;
      }
    }
  }
  return res;
}
function transformIsDraggable(val, eventDef, eventUi, context) {
  if (!val) {
    var state = context.getCurrentData();
    var viewSpec = state.viewSpecs[state.currentViewType];
    if (viewSpec.optionDefaults.needsResourceData) {
      if (computeResourceEditable(eventDef, context)) {
        return true;
      }
    }
  }
  return val;
}
var ResourceEventConfigAdder = function() {
  function ResourceEventConfigAdder2() {
    this.buildResourceEventUis = memoize(buildResourceEventUis, isPropsEqual);
    this.injectResourceEventUis = memoize(injectResourceEventUis);
  }
  ResourceEventConfigAdder2.prototype.transform = function(viewProps, calendarProps) {
    if (!calendarProps.viewSpec.optionDefaults.needsResourceData) {
      return {
        eventUiBases: this.injectResourceEventUis(viewProps.eventUiBases, viewProps.eventStore.defs, this.buildResourceEventUis(calendarProps.resourceStore))
      };
    }
    return null;
  };
  return ResourceEventConfigAdder2;
}();
function buildResourceEventUis(resourceStore) {
  return mapHash(resourceStore, function(resource) {
    return resource.ui;
  });
}
function injectResourceEventUis(eventUiBases, eventDefs, resourceEventUis) {
  return mapHash(eventUiBases, function(eventUi, defId) {
    if (defId) {
      return injectResourceEventUi(eventUi, eventDefs[defId], resourceEventUis);
    }
    return eventUi;
  });
}
function injectResourceEventUi(origEventUi, eventDef, resourceEventUis) {
  var parts = [];
  for (var _i = 0, _a = eventDef.resourceIds; _i < _a.length; _i++) {
    var resourceId = _a[_i];
    if (resourceEventUis[resourceId]) {
      parts.unshift(resourceEventUis[resourceId]);
    }
  }
  parts.unshift(origEventUi);
  return combineEventUis(parts);
}
var defs = [];
function registerResourceSourceDef(def) {
  defs.push(def);
}
function getResourceSourceDef(id) {
  return defs[id];
}
function getResourceSourceDefs() {
  return defs;
}
var RESOURCE_SOURCE_REFINERS = {
  id: String,
  resources: identity,
  url: String,
  method: String,
  startParam: String,
  endParam: String,
  timeZoneParam: String,
  extraParams: identity
};
function parseResourceSource(input) {
  var inputObj;
  if (typeof input === "string") {
    inputObj = { url: input };
  } else if (typeof input === "function" || Array.isArray(input)) {
    inputObj = { resources: input };
  } else if (typeof input === "object" && input) {
    inputObj = input;
  }
  if (inputObj) {
    var _a = refineProps(inputObj, RESOURCE_SOURCE_REFINERS), refined = _a.refined, extra = _a.extra;
    warnUnknownProps(extra);
    var metaRes = buildResourceSourceMeta(refined);
    if (metaRes) {
      return {
        _raw: input,
        sourceId: guid(),
        sourceDefId: metaRes.sourceDefId,
        meta: metaRes.meta,
        publicId: refined.id || "",
        isFetching: false,
        latestFetchId: "",
        fetchRange: null
      };
    }
  }
  return null;
}
function buildResourceSourceMeta(refined) {
  var defs2 = getResourceSourceDefs();
  for (var i = defs2.length - 1; i >= 0; i -= 1) {
    var def = defs2[i];
    var meta = def.parseMeta(refined);
    if (meta) {
      return { meta, sourceDefId: i };
    }
  }
  return null;
}
function warnUnknownProps(props) {
  for (var propName in props) {
    console.warn("Unknown resource prop '" + propName + "'");
  }
}
function reduceResourceSource(source, action, context) {
  var options = context.options, dateProfile = context.dateProfile;
  if (!source || !action) {
    return createSource(options.initialResources || options.resources, dateProfile.activeRange, options.refetchResourcesOnNavigate, context);
  }
  switch (action.type) {
    case "RESET_RESOURCE_SOURCE":
      return createSource(action.resourceSourceInput, dateProfile.activeRange, options.refetchResourcesOnNavigate, context);
    case "PREV":
    case "NEXT":
    case "CHANGE_DATE":
    case "CHANGE_VIEW_TYPE":
      return handleRangeChange(source, dateProfile.activeRange, options.refetchResourcesOnNavigate, context);
    case "RECEIVE_RESOURCES":
    case "RECEIVE_RESOURCE_ERROR":
      return receiveResponse(source, action.fetchId, action.fetchRange);
    case "REFETCH_RESOURCES":
      return fetchSource(source, dateProfile.activeRange, context);
    default:
      return source;
  }
}
function createSource(input, activeRange, refetchResourcesOnNavigate, context) {
  if (input) {
    var source = parseResourceSource(input);
    source = fetchSource(source, refetchResourcesOnNavigate ? activeRange : null, context);
    return source;
  }
  return null;
}
function handleRangeChange(source, activeRange, refetchResourcesOnNavigate, context) {
  if (refetchResourcesOnNavigate && !doesSourceIgnoreRange(source) && (!source.fetchRange || !rangesEqual(source.fetchRange, activeRange))) {
    return fetchSource(source, activeRange, context);
  }
  return source;
}
function doesSourceIgnoreRange(source) {
  return Boolean(getResourceSourceDef(source.sourceDefId).ignoreRange);
}
function fetchSource(source, fetchRange, context) {
  var sourceDef = getResourceSourceDef(source.sourceDefId);
  var fetchId = guid();
  sourceDef.fetch({
    resourceSource: source,
    range: fetchRange,
    context
  }, function(res) {
    context.dispatch({
      type: "RECEIVE_RESOURCES",
      fetchId,
      fetchRange,
      rawResources: res.rawResources
    });
  }, function(error) {
    context.dispatch({
      type: "RECEIVE_RESOURCE_ERROR",
      fetchId,
      fetchRange,
      error
    });
  });
  return __assign(__assign({}, source), { isFetching: true, latestFetchId: fetchId });
}
function receiveResponse(source, fetchId, fetchRange) {
  if (fetchId === source.latestFetchId) {
    return __assign(__assign({}, source), { isFetching: false, fetchRange });
  }
  return source;
}
var PRIVATE_ID_PREFIX = "_fc:";
var RESOURCE_REFINERS = {
  id: String,
  parentId: String,
  children: identity,
  title: String,
  businessHours: identity,
  extendedProps: identity,
  eventEditable: Boolean,
  eventStartEditable: Boolean,
  eventDurationEditable: Boolean,
  eventConstraint: identity,
  eventOverlap: Boolean,
  eventAllow: identity,
  eventClassNames: parseClassNames,
  eventBackgroundColor: String,
  eventBorderColor: String,
  eventTextColor: String,
  eventColor: String
};
function parseResource(raw, parentId, store, context) {
  if (parentId === void 0) {
    parentId = "";
  }
  var _a = refineProps(raw, RESOURCE_REFINERS), refined = _a.refined, extra = _a.extra;
  var resource = {
    id: refined.id || PRIVATE_ID_PREFIX + guid(),
    parentId: refined.parentId || parentId,
    title: refined.title || "",
    businessHours: refined.businessHours ? parseBusinessHours(refined.businessHours, context) : null,
    ui: createEventUi({
      editable: refined.eventEditable,
      startEditable: refined.eventStartEditable,
      durationEditable: refined.eventDurationEditable,
      constraint: refined.eventConstraint,
      overlap: refined.eventOverlap,
      allow: refined.eventAllow,
      classNames: refined.eventClassNames,
      backgroundColor: refined.eventBackgroundColor,
      borderColor: refined.eventBorderColor,
      textColor: refined.eventTextColor,
      color: refined.eventColor
    }, context),
    extendedProps: __assign(__assign({}, extra), refined.extendedProps)
  };
  Object.freeze(resource.ui.classNames);
  Object.freeze(resource.extendedProps);
  if (store[resource.id])
    ;
  else {
    store[resource.id] = resource;
    if (refined.children) {
      for (var _i = 0, _b = refined.children; _i < _b.length; _i++) {
        var childInput = _b[_i];
        parseResource(childInput, resource.id, store, context);
      }
    }
  }
  return resource;
}
function getPublicId(id) {
  if (id.indexOf(PRIVATE_ID_PREFIX) === 0) {
    return "";
  }
  return id;
}
function reduceResourceStore(store, action, source, context) {
  if (!store || !action) {
    return {};
  }
  switch (action.type) {
    case "RECEIVE_RESOURCES":
      return receiveRawResources(store, action.rawResources, action.fetchId, source, context);
    case "ADD_RESOURCE":
      return addResource(store, action.resourceHash);
    case "REMOVE_RESOURCE":
      return removeResource(store, action.resourceId);
    case "SET_RESOURCE_PROP":
      return setResourceProp(store, action.resourceId, action.propName, action.propValue);
    case "SET_RESOURCE_EXTENDED_PROP":
      return setResourceExtendedProp(store, action.resourceId, action.propName, action.propValue);
    default:
      return store;
  }
}
function receiveRawResources(existingStore, inputs, fetchId, source, context) {
  if (source.latestFetchId === fetchId) {
    var nextStore = {};
    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
      var input = inputs_1[_i];
      parseResource(input, "", nextStore, context);
    }
    return nextStore;
  }
  return existingStore;
}
function addResource(existingStore, additions) {
  return __assign(__assign({}, existingStore), additions);
}
function removeResource(existingStore, resourceId) {
  var newStore = __assign({}, existingStore);
  delete newStore[resourceId];
  for (var childResourceId in newStore) {
    if (newStore[childResourceId].parentId === resourceId) {
      newStore[childResourceId] = __assign(__assign({}, newStore[childResourceId]), { parentId: "" });
    }
  }
  return newStore;
}
function setResourceProp(existingStore, resourceId, name, value) {
  var _a, _b;
  var existingResource = existingStore[resourceId];
  if (existingResource) {
    return __assign(__assign({}, existingStore), (_a = {}, _a[resourceId] = __assign(__assign({}, existingResource), (_b = {}, _b[name] = value, _b)), _a));
  }
  return existingStore;
}
function setResourceExtendedProp(existingStore, resourceId, name, value) {
  var _a, _b;
  var existingResource = existingStore[resourceId];
  if (existingResource) {
    return __assign(__assign({}, existingStore), (_a = {}, _a[resourceId] = __assign(__assign({}, existingResource), { extendedProps: __assign(__assign({}, existingResource.extendedProps), (_b = {}, _b[name] = value, _b)) }), _a));
  }
  return existingStore;
}
function reduceResourceEntityExpansions(expansions, action) {
  var _a;
  if (!expansions || !action) {
    return {};
  }
  switch (action.type) {
    case "SET_RESOURCE_ENTITY_EXPANDED":
      return __assign(__assign({}, expansions), (_a = {}, _a[action.id] = action.isExpanded, _a));
    default:
      return expansions;
  }
}
function reduceResources(state, action, context) {
  var resourceSource = reduceResourceSource(state && state.resourceSource, action, context);
  var resourceStore = reduceResourceStore(state && state.resourceStore, action, resourceSource, context);
  var resourceEntityExpansions = reduceResourceEntityExpansions(state && state.resourceEntityExpansions, action);
  return {
    resourceSource,
    resourceStore,
    resourceEntityExpansions
  };
}
var EVENT_REFINERS = {
  resourceId: String,
  resourceIds: identity,
  resourceEditable: Boolean
};
function generateEventDefResourceMembers(refined) {
  return {
    resourceIds: ensureStringArray(refined.resourceIds).concat(refined.resourceId ? [refined.resourceId] : []),
    resourceEditable: refined.resourceEditable
  };
}
function ensureStringArray(items) {
  return (items || []).map(function(item) {
    return String(item);
  });
}
function transformDateSelectionJoin(hit0, hit1) {
  var resourceId0 = hit0.dateSpan.resourceId;
  var resourceId1 = hit1.dateSpan.resourceId;
  if (resourceId0 && resourceId1) {
    return { resourceId: resourceId0 };
  }
  return null;
}
var ResourceApi = function() {
  function ResourceApi2(_context, _resource) {
    this._context = _context;
    this._resource = _resource;
  }
  ResourceApi2.prototype.setProp = function(name, value) {
    var oldResource = this._resource;
    this._context.dispatch({
      type: "SET_RESOURCE_PROP",
      resourceId: oldResource.id,
      propName: name,
      propValue: value
    });
    this.sync(oldResource);
  };
  ResourceApi2.prototype.setExtendedProp = function(name, value) {
    var oldResource = this._resource;
    this._context.dispatch({
      type: "SET_RESOURCE_EXTENDED_PROP",
      resourceId: oldResource.id,
      propName: name,
      propValue: value
    });
    this.sync(oldResource);
  };
  ResourceApi2.prototype.sync = function(oldResource) {
    var context = this._context;
    var resourceId = oldResource.id;
    this._resource = context.getCurrentData().resourceStore[resourceId];
    context.emitter.trigger("resourceChange", {
      oldResource: new ResourceApi2(context, oldResource),
      resource: this,
      revert: function() {
        var _a;
        context.dispatch({
          type: "ADD_RESOURCE",
          resourceHash: (_a = {}, _a[resourceId] = oldResource, _a)
        });
      }
    });
  };
  ResourceApi2.prototype.remove = function() {
    var context = this._context;
    var internalResource = this._resource;
    var resourceId = internalResource.id;
    context.dispatch({
      type: "REMOVE_RESOURCE",
      resourceId
    });
    context.emitter.trigger("resourceRemove", {
      resource: this,
      revert: function() {
        var _a;
        context.dispatch({
          type: "ADD_RESOURCE",
          resourceHash: (_a = {}, _a[resourceId] = internalResource, _a)
        });
      }
    });
  };
  ResourceApi2.prototype.getParent = function() {
    var context = this._context;
    var parentId = this._resource.parentId;
    if (parentId) {
      return new ResourceApi2(context, context.getCurrentData().resourceSource[parentId]);
    }
    return null;
  };
  ResourceApi2.prototype.getChildren = function() {
    var thisResourceId = this._resource.id;
    var context = this._context;
    var resourceStore = context.getCurrentData().resourceStore;
    var childApis = [];
    for (var resourceId in resourceStore) {
      if (resourceStore[resourceId].parentId === thisResourceId) {
        childApis.push(new ResourceApi2(context, resourceStore[resourceId]));
      }
    }
    return childApis;
  };
  ResourceApi2.prototype.getEvents = function() {
    var thisResourceId = this._resource.id;
    var context = this._context;
    var _a = context.getCurrentData().eventStore, defs2 = _a.defs, instances = _a.instances;
    var eventApis = [];
    for (var instanceId in instances) {
      var instance = instances[instanceId];
      var def = defs2[instance.defId];
      if (def.resourceIds.indexOf(thisResourceId) !== -1) {
        eventApis.push(new EventApi(context, def, instance));
      }
    }
    return eventApis;
  };
  Object.defineProperty(ResourceApi2.prototype, "id", {
    get: function() {
      return getPublicId(this._resource.id);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "title", {
    get: function() {
      return this._resource.title;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "eventConstraint", {
    get: function() {
      return this._resource.ui.constraints[0] || null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "eventOverlap", {
    get: function() {
      return this._resource.ui.overlap;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "eventAllow", {
    get: function() {
      return this._resource.ui.allows[0] || null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "eventBackgroundColor", {
    get: function() {
      return this._resource.ui.backgroundColor;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "eventBorderColor", {
    get: function() {
      return this._resource.ui.borderColor;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "eventTextColor", {
    get: function() {
      return this._resource.ui.textColor;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "eventClassNames", {
    get: function() {
      return this._resource.ui.classNames;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ResourceApi2.prototype, "extendedProps", {
    get: function() {
      return this._resource.extendedProps;
    },
    enumerable: false,
    configurable: true
  });
  ResourceApi2.prototype.toPlainObject = function(settings) {
    if (settings === void 0) {
      settings = {};
    }
    var internal = this._resource;
    var ui = internal.ui;
    var publicId = this.id;
    var res = {};
    if (publicId) {
      res.id = publicId;
    }
    if (internal.title) {
      res.title = internal.title;
    }
    if (settings.collapseEventColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) {
      res.eventColor = ui.backgroundColor;
    } else {
      if (ui.backgroundColor) {
        res.eventBackgroundColor = ui.backgroundColor;
      }
      if (ui.borderColor) {
        res.eventBorderColor = ui.borderColor;
      }
    }
    if (ui.textColor) {
      res.eventTextColor = ui.textColor;
    }
    if (ui.classNames.length) {
      res.eventClassNames = ui.classNames;
    }
    if (Object.keys(internal.extendedProps).length) {
      if (settings.collapseExtendedProps) {
        __assign(res, internal.extendedProps);
      } else {
        res.extendedProps = internal.extendedProps;
      }
    }
    return res;
  };
  ResourceApi2.prototype.toJSON = function() {
    return this.toPlainObject();
  };
  return ResourceApi2;
}();
function buildResourceApis(resourceStore, context) {
  var resourceApis = [];
  for (var resourceId in resourceStore) {
    resourceApis.push(new ResourceApi(context, resourceStore[resourceId]));
  }
  return resourceApis;
}
CalendarApi.prototype.addResource = function(input, scrollTo) {
  var _a;
  var _this = this;
  if (scrollTo === void 0) {
    scrollTo = true;
  }
  var currentState = this.getCurrentData();
  var resourceHash;
  var resource;
  if (input instanceof ResourceApi) {
    resource = input._resource;
    resourceHash = (_a = {}, _a[resource.id] = resource, _a);
  } else {
    resourceHash = {};
    resource = parseResource(input, "", resourceHash, currentState);
  }
  this.dispatch({
    type: "ADD_RESOURCE",
    resourceHash
  });
  if (scrollTo) {
    this.trigger("_scrollRequest", { resourceId: resource.id });
  }
  var resourceApi = new ResourceApi(currentState, resource);
  currentState.emitter.trigger("resourceAdd", {
    resource: resourceApi,
    revert: function() {
      _this.dispatch({
        type: "REMOVE_RESOURCE",
        resourceId: resource.id
      });
    }
  });
  return resourceApi;
};
CalendarApi.prototype.getResourceById = function(id) {
  id = String(id);
  var currentState = this.getCurrentData();
  if (currentState.resourceStore) {
    var rawResource = currentState.resourceStore[id];
    if (rawResource) {
      return new ResourceApi(currentState, rawResource);
    }
  }
  return null;
};
CalendarApi.prototype.getResources = function() {
  var currentState = this.getCurrentData();
  var resourceStore = currentState.resourceStore;
  var resourceApis = [];
  if (resourceStore) {
    for (var resourceId in resourceStore) {
      resourceApis.push(new ResourceApi(currentState, resourceStore[resourceId]));
    }
  }
  return resourceApis;
};
CalendarApi.prototype.getTopLevelResources = function() {
  var currentState = this.getCurrentData();
  var resourceStore = currentState.resourceStore;
  var resourceApis = [];
  if (resourceStore) {
    for (var resourceId in resourceStore) {
      if (!resourceStore[resourceId].parentId) {
        resourceApis.push(new ResourceApi(currentState, resourceStore[resourceId]));
      }
    }
  }
  return resourceApis;
};
CalendarApi.prototype.refetchResources = function() {
  this.dispatch({
    type: "REFETCH_RESOURCES"
  });
};
function transformDatePoint(dateSpan, context) {
  return dateSpan.resourceId ? { resource: context.calendarApi.getResourceById(dateSpan.resourceId) } : {};
}
function transformDateSpan(dateSpan, context) {
  return dateSpan.resourceId ? { resource: context.calendarApi.getResourceById(dateSpan.resourceId) } : {};
}
var ResourceSplitter = function(_super) {
  __extends(ResourceSplitter2, _super);
  function ResourceSplitter2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ResourceSplitter2.prototype.getKeyInfo = function(props) {
    return __assign({ "": {} }, props.resourceStore);
  };
  ResourceSplitter2.prototype.getKeysForDateSpan = function(dateSpan) {
    return [dateSpan.resourceId || ""];
  };
  ResourceSplitter2.prototype.getKeysForEventDef = function(eventDef) {
    var resourceIds = eventDef.resourceIds;
    if (!resourceIds.length) {
      return [""];
    }
    return resourceIds;
  };
  return ResourceSplitter2;
}(Splitter);
function isPropsValidWithResources(combinedProps, context) {
  var splitter = new ResourceSplitter();
  var sets = splitter.splitProps(__assign(__assign({}, combinedProps), { resourceStore: context.getCurrentData().resourceStore }));
  for (var resourceId in sets) {
    var props = sets[resourceId];
    if (resourceId && sets[""]) {
      props = __assign(__assign({}, props), { eventStore: mergeEventStores(sets[""].eventStore, props.eventStore), eventUiBases: __assign(__assign({}, sets[""].eventUiBases), props.eventUiBases) });
    }
    if (!isPropsValid(props, context, { resourceId }, filterConfig.bind(null, resourceId))) {
      return false;
    }
  }
  return true;
}
function filterConfig(resourceId, config2) {
  return __assign(__assign({}, config2), { constraints: filterConstraints(resourceId, config2.constraints) });
}
function filterConstraints(resourceId, constraints) {
  return constraints.map(function(constraint) {
    var defs2 = constraint.defs;
    if (defs2) {
      for (var defId in defs2) {
        var resourceIds = defs2[defId].resourceIds;
        if (resourceIds.length && resourceIds.indexOf(resourceId) === -1) {
          return false;
        }
      }
    }
    return constraint;
  });
}
function transformExternalDef(dateSpan) {
  return dateSpan.resourceId ? { resourceId: dateSpan.resourceId } : {};
}
EventApi.prototype.getResources = function() {
  var calendarApi = this._context.calendarApi;
  return this._def.resourceIds.map(function(resourceId) {
    return calendarApi.getResourceById(resourceId);
  });
};
EventApi.prototype.setResources = function(resources) {
  var resourceIds = [];
  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
    var resource = resources_1[_i];
    var resourceId = null;
    if (typeof resource === "string") {
      resourceId = resource;
    } else if (typeof resource === "number") {
      resourceId = String(resource);
    } else if (resource instanceof ResourceApi) {
      resourceId = resource.id;
    } else {
      console.warn("unknown resource type: " + resource);
    }
    if (resourceId) {
      resourceIds.push(resourceId);
    }
  }
  this.mutate({
    standardProps: {
      resourceIds
    }
  });
};
var optionChangeHandlers = {
  resources: handleResources
};
function handleResources(newSourceInput, context) {
  var oldSourceInput = context.getCurrentData().resourceSource._raw;
  if (oldSourceInput !== newSourceInput) {
    context.dispatch({
      type: "RESET_RESOURCE_SOURCE",
      resourceSourceInput: newSourceInput
    });
  }
}
var DEFAULT_RESOURCE_ORDER = parseFieldSpecs("id,title");
function handleResourceStore(resourceStore, calendarData) {
  var emitter = calendarData.emitter;
  if (emitter.hasHandlers("resourcesSet")) {
    emitter.trigger("resourcesSet", buildResourceApis(resourceStore, calendarData));
  }
}
var OPTION_REFINERS3 = {
  initialResources: identity,
  resources: identity,
  eventResourceEditable: Boolean,
  refetchResourcesOnNavigate: Boolean,
  resourceOrder: parseFieldSpecs,
  filterResourcesWithEvents: Boolean,
  resourceGroupField: String,
  resourceAreaWidth: identity,
  resourceAreaColumns: identity,
  resourcesInitiallyExpanded: Boolean,
  datesAboveResources: Boolean,
  needsResourceData: Boolean,
  resourceAreaHeaderClassNames: identity,
  resourceAreaHeaderContent: identity,
  resourceAreaHeaderDidMount: identity,
  resourceAreaHeaderWillUnmount: identity,
  resourceGroupLabelClassNames: identity,
  resourceGroupLabelContent: identity,
  resourceGroupLabelDidMount: identity,
  resourceGroupLabelWillUnmount: identity,
  resourceLabelClassNames: identity,
  resourceLabelContent: identity,
  resourceLabelDidMount: identity,
  resourceLabelWillUnmount: identity,
  resourceLaneClassNames: identity,
  resourceLaneContent: identity,
  resourceLaneDidMount: identity,
  resourceLaneWillUnmount: identity,
  resourceGroupLaneClassNames: identity,
  resourceGroupLaneContent: identity,
  resourceGroupLaneDidMount: identity,
  resourceGroupLaneWillUnmount: identity
};
var LISTENER_REFINERS = {
  resourcesSet: identity,
  resourceAdd: identity,
  resourceChange: identity,
  resourceRemove: identity
};
registerResourceSourceDef({
  ignoreRange: true,
  parseMeta: function(refined) {
    if (Array.isArray(refined.resources)) {
      return refined.resources;
    }
    return null;
  },
  fetch: function(arg, successCallback) {
    successCallback({
      rawResources: arg.resourceSource.meta
    });
  }
});
registerResourceSourceDef({
  parseMeta: function(refined) {
    if (typeof refined.resources === "function") {
      return refined.resources;
    }
    return null;
  },
  fetch: function(arg, success, failure) {
    var dateEnv = arg.context.dateEnv;
    var func = arg.resourceSource.meta;
    var publicArg = arg.range ? {
      start: dateEnv.toDate(arg.range.start),
      end: dateEnv.toDate(arg.range.end),
      startStr: dateEnv.formatIso(arg.range.start),
      endStr: dateEnv.formatIso(arg.range.end),
      timeZone: dateEnv.timeZone
    } : {};
    unpromisify(func.bind(null, publicArg), function(rawResources) {
      success({ rawResources });
    }, failure);
  }
});
registerResourceSourceDef({
  parseMeta: function(refined) {
    if (refined.url) {
      return {
        url: refined.url,
        method: (refined.method || "GET").toUpperCase(),
        extraParams: refined.extraParams
      };
    }
    return null;
  },
  fetch: function(arg, successCallback, failureCallback) {
    var meta = arg.resourceSource.meta;
    var requestParams = buildRequestParams(meta, arg.range, arg.context);
    requestJson(meta.method, meta.url, requestParams, function(rawResources, xhr) {
      successCallback({ rawResources, xhr });
    }, function(message, xhr) {
      failureCallback({ message, xhr });
    });
  }
});
function buildRequestParams(meta, range, context) {
  var dateEnv = context.dateEnv, options = context.options;
  var startParam;
  var endParam;
  var timeZoneParam;
  var customRequestParams;
  var params = {};
  if (range) {
    startParam = meta.startParam;
    if (startParam == null) {
      startParam = options.startParam;
    }
    endParam = meta.endParam;
    if (endParam == null) {
      endParam = options.endParam;
    }
    timeZoneParam = meta.timeZoneParam;
    if (timeZoneParam == null) {
      timeZoneParam = options.timeZoneParam;
    }
    params[startParam] = dateEnv.formatIso(range.start);
    params[endParam] = dateEnv.formatIso(range.end);
    if (dateEnv.timeZone !== "local") {
      params[timeZoneParam] = dateEnv.timeZone;
    }
  }
  if (typeof meta.extraParams === "function") {
    customRequestParams = meta.extraParams();
  } else {
    customRequestParams = meta.extraParams || {};
  }
  __assign(params, customRequestParams);
  return params;
}
function ResourceLabelRoot(props) {
  return createElement(ViewContextType.Consumer, null, function(context) {
    var options = context.options;
    var hookProps = {
      resource: new ResourceApi(context, props.resource),
      date: props.date ? context.dateEnv.toDate(props.date) : null,
      view: context.viewApi
    };
    var dataAttrs = {
      "data-resource-id": props.resource.id,
      "data-date": props.date ? formatDayString(props.date) : void 0
    };
    return createElement(RenderHook, { hookProps, classNames: options.resourceLabelClassNames, content: options.resourceLabelContent, defaultContent: renderInnerContent, didMount: options.resourceLabelDidMount, willUnmount: options.resourceLabelWillUnmount }, function(rootElRef, classNames, innerElRef, innerContent) {
      return props.children(
        rootElRef,
        classNames,
        dataAttrs,
        innerElRef,
        innerContent
      );
    });
  });
}
function renderInnerContent(props) {
  return props.resource.title || props.resource.id;
}
var ResourceCell = function(_super) {
  __extends(ResourceCell2, _super);
  function ResourceCell2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ResourceCell2.prototype.render = function() {
    var props = this.props;
    return createElement(ResourceLabelRoot, { resource: props.resource, date: props.date }, function(elRef, customClassNames, dataAttrs, innerElRef, innerContent) {
      return createElement(
        "th",
        __assign({ ref: elRef, role: "columnheader", className: ["fc-col-header-cell", "fc-resource"].concat(customClassNames).join(" "), colSpan: props.colSpan }, dataAttrs),
        createElement(
          "div",
          { className: "fc-scrollgrid-sync-inner" },
          createElement("span", { className: [
            "fc-col-header-cell-cushion",
            props.isSticky ? "fc-sticky" : ""
          ].join(" "), ref: innerElRef }, innerContent)
        )
      );
    });
  };
  return ResourceCell2;
}(BaseComponent);
var ResourceDayHeader = function(_super) {
  __extends(ResourceDayHeader2, _super);
  function ResourceDayHeader2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.buildDateFormat = memoize(buildDateFormat);
    return _this;
  }
  ResourceDayHeader2.prototype.render = function() {
    var _this = this;
    var _a = this, props = _a.props, context = _a.context;
    var dateFormat = this.buildDateFormat(context.options.dayHeaderFormat, props.datesRepDistinctDays, props.dates.length);
    return createElement(NowTimer, { unit: "day" }, function(nowDate, todayRange) {
      if (props.dates.length === 1) {
        return _this.renderResourceRow(props.resources, props.dates[0]);
      }
      if (context.options.datesAboveResources) {
        return _this.renderDayAndResourceRows(props.dates, dateFormat, todayRange, props.resources);
      }
      return _this.renderResourceAndDayRows(props.resources, props.dates, dateFormat, todayRange);
    });
  };
  ResourceDayHeader2.prototype.renderResourceRow = function(resources, date) {
    var resourceCells = resources.map(function(resource) {
      return createElement(ResourceCell, { key: resource.id, resource, colSpan: 1, date });
    });
    return this.buildTr(resourceCells, "resources");
  };
  ResourceDayHeader2.prototype.renderDayAndResourceRows = function(dates, dateFormat, todayRange, resources) {
    var dateCells = [];
    var resourceCells = [];
    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
      var date = dates_1[_i];
      dateCells.push(this.renderDateCell(date, dateFormat, todayRange, resources.length, null, true));
      for (var _a = 0, resources_1 = resources; _a < resources_1.length; _a++) {
        var resource = resources_1[_a];
        resourceCells.push(createElement(ResourceCell, { key: resource.id + ":" + date.toISOString(), resource, colSpan: 1, date }));
      }
    }
    return createElement(
      Fragment,
      null,
      this.buildTr(dateCells, "day"),
      this.buildTr(resourceCells, "resources")
    );
  };
  ResourceDayHeader2.prototype.renderResourceAndDayRows = function(resources, dates, dateFormat, todayRange) {
    var resourceCells = [];
    var dateCells = [];
    for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {
      var resource = resources_2[_i];
      resourceCells.push(createElement(ResourceCell, { key: resource.id, resource, colSpan: dates.length, isSticky: true }));
      for (var _a = 0, dates_2 = dates; _a < dates_2.length; _a++) {
        var date = dates_2[_a];
        dateCells.push(this.renderDateCell(date, dateFormat, todayRange, 1, resource));
      }
    }
    return createElement(
      Fragment,
      null,
      this.buildTr(resourceCells, "resources"),
      this.buildTr(dateCells, "day")
    );
  };
  ResourceDayHeader2.prototype.renderDateCell = function(date, dateFormat, todayRange, colSpan, resource, isSticky) {
    var props = this.props;
    var keyPostfix = resource ? ":" + resource.id : "";
    var extraHookProps = resource ? { resource: new ResourceApi(this.context, resource) } : {};
    var extraDataAttrs = resource ? { "data-resource-id": resource.id } : {};
    return props.datesRepDistinctDays ? createElement(TableDateCell, { key: date.toISOString() + keyPostfix, date, dateProfile: props.dateProfile, todayRange, colCnt: props.dates.length * props.resources.length, dayHeaderFormat: dateFormat, colSpan, isSticky, extraHookProps, extraDataAttrs }) : createElement(
      TableDowCell,
      { key: date.getUTCDay() + keyPostfix, dow: date.getUTCDay(), dayHeaderFormat: dateFormat, colSpan, isSticky, extraHookProps, extraDataAttrs }
    );
  };
  ResourceDayHeader2.prototype.buildTr = function(cells, key) {
    var renderIntro = this.props.renderIntro;
    if (!cells.length) {
      cells = [createElement("td", { key: 0 }, "\xA0")];
    }
    return createElement(
      "tr",
      { key, role: "row" },
      renderIntro && renderIntro(key),
      cells
    );
  };
  return ResourceDayHeader2;
}(BaseComponent);
function buildDateFormat(dayHeaderFormat, datesRepDistinctDays, dayCnt) {
  return dayHeaderFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt);
}
var ResourceIndex = function() {
  function ResourceIndex2(resources) {
    var indicesById = {};
    var ids = [];
    for (var i = 0; i < resources.length; i += 1) {
      var id = resources[i].id;
      ids.push(id);
      indicesById[id] = i;
    }
    this.ids = ids;
    this.indicesById = indicesById;
    this.length = resources.length;
  }
  return ResourceIndex2;
}();
var AbstractResourceDayTableModel = function() {
  function AbstractResourceDayTableModel2(dayTableModel, resources, context) {
    this.dayTableModel = dayTableModel;
    this.resources = resources;
    this.context = context;
    this.resourceIndex = new ResourceIndex(resources);
    this.rowCnt = dayTableModel.rowCnt;
    this.colCnt = dayTableModel.colCnt * resources.length;
    this.cells = this.buildCells();
  }
  AbstractResourceDayTableModel2.prototype.buildCells = function() {
    var _a = this, rowCnt = _a.rowCnt, dayTableModel = _a.dayTableModel, resources = _a.resources;
    var rows = [];
    for (var row = 0; row < rowCnt; row += 1) {
      var rowCells = [];
      for (var dateCol = 0; dateCol < dayTableModel.colCnt; dateCol += 1) {
        for (var resourceCol = 0; resourceCol < resources.length; resourceCol += 1) {
          var resource = resources[resourceCol];
          var extraHookProps = { resource: new ResourceApi(this.context, resource) };
          var extraDataAttrs = { "data-resource-id": resource.id };
          var extraClassNames = ["fc-resource"];
          var extraDateSpan = { resourceId: resource.id };
          var date = dayTableModel.cells[row][dateCol].date;
          rowCells[this.computeCol(dateCol, resourceCol)] = {
            key: resource.id + ":" + date.toISOString(),
            date,
            extraHookProps,
            extraDataAttrs,
            extraClassNames,
            extraDateSpan
          };
        }
      }
      rows.push(rowCells);
    }
    return rows;
  };
  return AbstractResourceDayTableModel2;
}();
var ResourceDayTableModel = function(_super) {
  __extends(ResourceDayTableModel2, _super);
  function ResourceDayTableModel2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ResourceDayTableModel2.prototype.computeCol = function(dateI, resourceI) {
    return resourceI * this.dayTableModel.colCnt + dateI;
  };
  ResourceDayTableModel2.prototype.computeColRanges = function(dateStartI, dateEndI, resourceI) {
    return [
      {
        firstCol: this.computeCol(dateStartI, resourceI),
        lastCol: this.computeCol(dateEndI, resourceI),
        isStart: true,
        isEnd: true
      }
    ];
  };
  return ResourceDayTableModel2;
}(AbstractResourceDayTableModel);
var DayResourceTableModel = function(_super) {
  __extends(DayResourceTableModel2, _super);
  function DayResourceTableModel2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DayResourceTableModel2.prototype.computeCol = function(dateI, resourceI) {
    return dateI * this.resources.length + resourceI;
  };
  DayResourceTableModel2.prototype.computeColRanges = function(dateStartI, dateEndI, resourceI) {
    var segs = [];
    for (var i = dateStartI; i <= dateEndI; i += 1) {
      var col = this.computeCol(i, resourceI);
      segs.push({
        firstCol: col,
        lastCol: col,
        isStart: i === dateStartI,
        isEnd: i === dateEndI
      });
    }
    return segs;
  };
  return DayResourceTableModel2;
}(AbstractResourceDayTableModel);
var NO_SEGS = [];
var VResourceJoiner = function() {
  function VResourceJoiner2() {
    this.joinDateSelection = memoize(this.joinSegs);
    this.joinBusinessHours = memoize(this.joinSegs);
    this.joinFgEvents = memoize(this.joinSegs);
    this.joinBgEvents = memoize(this.joinSegs);
    this.joinEventDrags = memoize(this.joinInteractions);
    this.joinEventResizes = memoize(this.joinInteractions);
  }
  VResourceJoiner2.prototype.joinProps = function(propSets, resourceDayTable) {
    var dateSelectionSets = [];
    var businessHoursSets = [];
    var fgEventSets = [];
    var bgEventSets = [];
    var eventDrags = [];
    var eventResizes = [];
    var eventSelection = "";
    var keys = resourceDayTable.resourceIndex.ids.concat([""]);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      var props = propSets[key];
      dateSelectionSets.push(props.dateSelectionSegs);
      businessHoursSets.push(key ? props.businessHourSegs : NO_SEGS);
      fgEventSets.push(key ? props.fgEventSegs : NO_SEGS);
      bgEventSets.push(props.bgEventSegs);
      eventDrags.push(props.eventDrag);
      eventResizes.push(props.eventResize);
      eventSelection = eventSelection || props.eventSelection;
    }
    return {
      dateSelectionSegs: this.joinDateSelection.apply(this, __spreadArray([resourceDayTable], dateSelectionSets)),
      businessHourSegs: this.joinBusinessHours.apply(this, __spreadArray([resourceDayTable], businessHoursSets)),
      fgEventSegs: this.joinFgEvents.apply(this, __spreadArray([resourceDayTable], fgEventSets)),
      bgEventSegs: this.joinBgEvents.apply(this, __spreadArray([resourceDayTable], bgEventSets)),
      eventDrag: this.joinEventDrags.apply(this, __spreadArray([resourceDayTable], eventDrags)),
      eventResize: this.joinEventResizes.apply(this, __spreadArray([resourceDayTable], eventResizes)),
      eventSelection
    };
  };
  VResourceJoiner2.prototype.joinSegs = function(resourceDayTable) {
    var segGroups = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      segGroups[_i - 1] = arguments[_i];
    }
    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];
    for (var i = 0; i < resourceCnt; i += 1) {
      for (var _a = 0, _b = segGroups[i]; _a < _b.length; _a++) {
        var seg = _b[_a];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
      for (var _c = 0, _d = segGroups[resourceCnt]; _c < _d.length; _c++) {
        var seg = _d[_c];
        transformedSegs.push.apply(
          transformedSegs,
          this.transformSeg(seg, resourceDayTable, i)
        );
      }
    }
    return transformedSegs;
  };
  VResourceJoiner2.prototype.expandSegs = function(resourceDayTable, segs) {
    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];
    for (var i = 0; i < resourceCnt; i += 1) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
    }
    return transformedSegs;
  };
  VResourceJoiner2.prototype.joinInteractions = function(resourceDayTable) {
    var interactions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      interactions[_i - 1] = arguments[_i];
    }
    var resourceCnt = resourceDayTable.resources.length;
    var affectedInstances = {};
    var transformedSegs = [];
    var anyInteractions = false;
    var isEvent = false;
    for (var i = 0; i < resourceCnt; i += 1) {
      var interaction = interactions[i];
      if (interaction) {
        anyInteractions = true;
        for (var _a = 0, _b = interaction.segs; _a < _b.length; _a++) {
          var seg = _b[_a];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
        }
        __assign(affectedInstances, interaction.affectedInstances);
        isEvent = isEvent || interaction.isEvent;
      }
      if (interactions[resourceCnt]) {
        for (var _c = 0, _d = interactions[resourceCnt].segs; _c < _d.length; _c++) {
          var seg = _d[_c];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
        }
      }
    }
    if (anyInteractions) {
      return {
        affectedInstances,
        segs: transformedSegs,
        isEvent
      };
    }
    return null;
  };
  return VResourceJoiner2;
}();
var VResourceSplitter = function(_super) {
  __extends(VResourceSplitter2, _super);
  function VResourceSplitter2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  VResourceSplitter2.prototype.getKeyInfo = function(props) {
    var resourceDayTableModel = props.resourceDayTableModel;
    var hash = mapHash(resourceDayTableModel.resourceIndex.indicesById, function(i) {
      return resourceDayTableModel.resources[i];
    });
    hash[""] = {};
    return hash;
  };
  VResourceSplitter2.prototype.getKeysForDateSpan = function(dateSpan) {
    return [dateSpan.resourceId || ""];
  };
  VResourceSplitter2.prototype.getKeysForEventDef = function(eventDef) {
    var resourceIds = eventDef.resourceIds;
    if (!resourceIds.length) {
      return [""];
    }
    return resourceIds;
  };
  return VResourceSplitter2;
}(Splitter);
function flattenResources(resourceStore, orderSpecs) {
  return buildRowNodes(resourceStore, [], orderSpecs, false, {}, true).map(function(node) {
    return node.resource;
  });
}
function buildRowNodes(resourceStore, groupSpecs, orderSpecs, isVGrouping, expansions, expansionDefault) {
  var complexNodes = buildHierarchy(resourceStore, isVGrouping ? -1 : 1, groupSpecs, orderSpecs);
  var flatNodes = [];
  flattenNodes(complexNodes, flatNodes, isVGrouping, [], 0, expansions, expansionDefault);
  return flatNodes;
}
function flattenNodes(complexNodes, res, isVGrouping, rowSpans, depth, expansions, expansionDefault) {
  for (var i = 0; i < complexNodes.length; i += 1) {
    var complexNode = complexNodes[i];
    var group = complexNode.group;
    if (group) {
      if (isVGrouping) {
        var firstRowIndex = res.length;
        var rowSpanIndex = rowSpans.length;
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans.concat(0), depth, expansions, expansionDefault);
        if (firstRowIndex < res.length) {
          var firstRow = res[firstRowIndex];
          var firstRowSpans = firstRow.rowSpans = firstRow.rowSpans.slice();
          firstRowSpans[rowSpanIndex] = res.length - firstRowIndex;
        }
      } else {
        var id = group.spec.field + ":" + group.value;
        var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
        res.push({ id, group, isExpanded });
        if (isExpanded) {
          flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
        }
      }
    } else if (complexNode.resource) {
      var id = complexNode.resource.id;
      var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
      res.push({
        id,
        rowSpans,
        depth,
        isExpanded,
        hasChildren: Boolean(complexNode.children.length),
        resource: complexNode.resource,
        resourceFields: complexNode.resourceFields
      });
      if (isExpanded) {
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
      }
    }
  }
}
function buildHierarchy(resourceStore, maxDepth, groupSpecs, orderSpecs) {
  var resourceNodes = buildResourceNodes(resourceStore, orderSpecs);
  var builtNodes = [];
  for (var resourceId in resourceNodes) {
    var resourceNode = resourceNodes[resourceId];
    if (!resourceNode.resource.parentId) {
      insertResourceNode(resourceNode, builtNodes, groupSpecs, 0, maxDepth, orderSpecs);
    }
  }
  return builtNodes;
}
function buildResourceNodes(resourceStore, orderSpecs) {
  var nodeHash = {};
  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];
    nodeHash[resourceId] = {
      resource,
      resourceFields: buildResourceFields(resource),
      children: []
    };
  }
  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];
    if (resource.parentId) {
      var parentNode = nodeHash[resource.parentId];
      if (parentNode) {
        insertResourceNodeInSiblings(nodeHash[resourceId], parentNode.children, orderSpecs);
      }
    }
  }
  return nodeHash;
}
function insertResourceNode(resourceNode, nodes, groupSpecs, depth, maxDepth, orderSpecs) {
  if (groupSpecs.length && (maxDepth === -1 || depth <= maxDepth)) {
    var groupNode = ensureGroupNodes(resourceNode, nodes, groupSpecs[0]);
    insertResourceNode(resourceNode, groupNode.children, groupSpecs.slice(1), depth + 1, maxDepth, orderSpecs);
  } else {
    insertResourceNodeInSiblings(resourceNode, nodes, orderSpecs);
  }
}
function ensureGroupNodes(resourceNode, nodes, groupSpec) {
  var groupValue = resourceNode.resourceFields[groupSpec.field];
  var groupNode;
  var newGroupIndex;
  if (groupSpec.order) {
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex += 1) {
      var node = nodes[newGroupIndex];
      if (node.group) {
        var cmp = flexibleCompare(groupValue, node.group.value) * groupSpec.order;
        if (cmp === 0) {
          groupNode = node;
          break;
        } else if (cmp < 0) {
          break;
        }
      }
    }
  } else {
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex += 1) {
      var node = nodes[newGroupIndex];
      if (node.group && groupValue === node.group.value) {
        groupNode = node;
        break;
      }
    }
  }
  if (!groupNode) {
    groupNode = {
      group: {
        value: groupValue,
        spec: groupSpec
      },
      children: []
    };
    nodes.splice(newGroupIndex, 0, groupNode);
  }
  return groupNode;
}
function insertResourceNodeInSiblings(resourceNode, siblings, orderSpecs) {
  var i;
  for (i = 0; i < siblings.length; i += 1) {
    var cmp = compareByFieldSpecs(siblings[i].resourceFields, resourceNode.resourceFields, orderSpecs);
    if (cmp > 0) {
      break;
    }
  }
  siblings.splice(i, 0, resourceNode);
}
function buildResourceFields(resource) {
  var obj = __assign(__assign(__assign({}, resource.extendedProps), resource.ui), resource);
  delete obj.ui;
  delete obj.extendedProps;
  return obj;
}
var main3 = createPlugin({
  deps: [
    main_default4
  ],
  reducers: [
    reduceResources
  ],
  isLoadingFuncs: [
    function(state) {
      return state.resourceSource && state.resourceSource.isFetching;
    }
  ],
  eventRefiners: EVENT_REFINERS,
  eventDefMemberAdders: [generateEventDefResourceMembers],
  isDraggableTransformers: [transformIsDraggable],
  eventDragMutationMassagers: [massageEventDragMutation],
  eventDefMutationAppliers: [applyEventDefMutation],
  dateSelectionTransformers: [transformDateSelectionJoin],
  datePointTransforms: [transformDatePoint],
  dateSpanTransforms: [transformDateSpan],
  viewPropsTransformers: [ResourceDataAdder, ResourceEventConfigAdder],
  isPropsValid: isPropsValidWithResources,
  externalDefTransforms: [transformExternalDef],
  eventDropTransformers: [transformEventDrop],
  optionChangeHandlers,
  optionRefiners: OPTION_REFINERS3,
  listenerRefiners: LISTENER_REFINERS,
  propSetHandlers: { resourceStore: handleResourceStore }
});
var main_default5 = main3;

// node_modules/@fullcalendar/resource-daygrid/node_modules/@fullcalendar/premium-common/main.js
var RELEASE_DATE3 = "2023-05-08";
var UPGRADE_WINDOW3 = 365 + 7;
var INVALID_LICENSE_URL3 = "http://fullcalendar.io/docs/schedulerLicenseKey#invalid";
var OUTDATED_LICENSE_URL3 = "http://fullcalendar.io/docs/schedulerLicenseKey#outdated";
var PRESET_LICENSE_KEYS3 = [
  "GPL-My-Project-Is-Open-Source",
  "CC-Attribution-NonCommercial-NoDerivatives"
];
var CSS3 = {
  position: "absolute",
  zIndex: 99999,
  bottom: "1px",
  left: "1px",
  background: "#eee",
  borderColor: "#ddd",
  borderStyle: "solid",
  borderWidth: "1px 1px 0 0",
  padding: "2px 4px",
  fontSize: "12px",
  borderTopRightRadius: "3px"
};
function buildLicenseWarning3(context) {
  var key = context.options.schedulerLicenseKey;
  var currentUrl = typeof window !== "undefined" ? window.location.href : "";
  if (!isImmuneUrl3(currentUrl)) {
    var status_1 = processLicenseKey3(key);
    if (status_1 !== "valid") {
      return createElement("div", { className: "fc-license-message", style: CSS3 }, status_1 === "outdated" ? createElement(
        Fragment,
        null,
        "Your license key is too old to work with this version. ",
        createElement("a", { href: OUTDATED_LICENSE_URL3 }, "More Info")
      ) : createElement(
        Fragment,
        null,
        "Your license key is invalid. ",
        createElement("a", { href: INVALID_LICENSE_URL3 }, "More Info")
      ));
    }
  }
  return null;
}
function processLicenseKey3(key) {
  if (PRESET_LICENSE_KEYS3.indexOf(key) !== -1) {
    return "valid";
  }
  var parts = (key || "").match(/^(\d+)-fcs-(\d+)$/);
  if (parts && parts[1].length === 10) {
    var purchaseDate = new Date(parseInt(parts[2], 10) * 1e3);
    var releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE3);
    if (isValidDate(releaseDate)) {
      var minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW3);
      if (minPurchaseDate < purchaseDate) {
        return "valid";
      }
      return "outdated";
    }
  }
  return "invalid";
}
function isImmuneUrl3(url) {
  return /\w+:\/\/fullcalendar\.io\/|\/examples\/[\w-]+\.html$/.test(url);
}
var OPTION_REFINERS4 = {
  schedulerLicenseKey: String
};
var main4 = createPlugin({
  optionRefiners: OPTION_REFINERS4,
  viewContainerAppends: [buildLicenseWarning3]
});
var main_default6 = main4;

// node_modules/@fullcalendar/resource-daygrid/main.js
var ResourceDayTableJoiner = function(_super) {
  __extends(ResourceDayTableJoiner2, _super);
  function ResourceDayTableJoiner2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ResourceDayTableJoiner2.prototype.transformSeg = function(seg, resourceDayTableModel, resourceI) {
    var colRanges = resourceDayTableModel.computeColRanges(seg.firstCol, seg.lastCol, resourceI);
    return colRanges.map(function(colRange) {
      return __assign(__assign(__assign({}, seg), colRange), { isStart: seg.isStart && colRange.isStart, isEnd: seg.isEnd && colRange.isEnd });
    });
  };
  return ResourceDayTableJoiner2;
}(VResourceJoiner);
var ResourceDayTable = function(_super) {
  __extends(ResourceDayTable2, _super);
  function ResourceDayTable2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.splitter = new VResourceSplitter();
    _this.slicers = {};
    _this.joiner = new ResourceDayTableJoiner();
    _this.tableRef = createRef();
    _this.isHitComboAllowed = function(hit0, hit1) {
      var allowAcrossResources = _this.props.resourceDayTableModel.dayTableModel.colCnt === 1;
      return allowAcrossResources || hit0.dateSpan.resourceId === hit1.dateSpan.resourceId;
    };
    return _this;
  }
  ResourceDayTable2.prototype.render = function() {
    var _this = this;
    var _a = this, props = _a.props, context = _a.context;
    var resourceDayTableModel = props.resourceDayTableModel, nextDayThreshold = props.nextDayThreshold, dateProfile = props.dateProfile;
    var splitProps = this.splitter.splitProps(props);
    this.slicers = mapHash(splitProps, function(split, resourceId) {
      return _this.slicers[resourceId] || new DayTableSlicer();
    });
    var slicedProps = mapHash(this.slicers, function(slicer, resourceId) {
      return slicer.sliceProps(splitProps[resourceId], dateProfile, nextDayThreshold, context, resourceDayTableModel.dayTableModel);
    });
    return createElement(Table, __assign({ forPrint: props.forPrint, ref: this.tableRef }, this.joiner.joinProps(slicedProps, resourceDayTableModel), { cells: resourceDayTableModel.cells, dateProfile, colGroupNode: props.colGroupNode, tableMinWidth: props.tableMinWidth, renderRowIntro: props.renderRowIntro, dayMaxEvents: props.dayMaxEvents, dayMaxEventRows: props.dayMaxEventRows, showWeekNumbers: props.showWeekNumbers, expandRows: props.expandRows, headerAlignElRef: props.headerAlignElRef, clientWidth: props.clientWidth, clientHeight: props.clientHeight, isHitComboAllowed: this.isHitComboAllowed }));
  };
  return ResourceDayTable2;
}(DateComponent);
var ResourceDayTableView = function(_super) {
  __extends(ResourceDayTableView2, _super);
  function ResourceDayTableView2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.flattenResources = memoize(flattenResources);
    _this.buildResourceDayTableModel = memoize(buildResourceDayTableModel);
    _this.headerRef = createRef();
    _this.tableRef = createRef();
    return _this;
  }
  ResourceDayTableView2.prototype.render = function() {
    var _this = this;
    var _a = this, props = _a.props, context = _a.context;
    var options = context.options;
    var resourceOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;
    var resources = this.flattenResources(props.resourceStore, resourceOrderSpecs);
    var resourceDayTableModel = this.buildResourceDayTableModel(props.dateProfile, context.dateProfileGenerator, resources, options.datesAboveResources, context);
    var headerContent = options.dayHeaders && createElement(ResourceDayHeader, { ref: this.headerRef, resources, dateProfile: props.dateProfile, dates: resourceDayTableModel.dayTableModel.headerDates, datesRepDistinctDays: true });
    var bodyContent = function(contentArg) {
      return createElement(ResourceDayTable, { ref: _this.tableRef, dateProfile: props.dateProfile, resourceDayTableModel, businessHours: props.businessHours, eventStore: props.eventStore, eventUiBases: props.eventUiBases, dateSelection: props.dateSelection, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, nextDayThreshold: options.nextDayThreshold, tableMinWidth: contentArg.tableMinWidth, colGroupNode: contentArg.tableColGroupNode, dayMaxEvents: options.dayMaxEvents, dayMaxEventRows: options.dayMaxEventRows, showWeekNumbers: options.weekNumbers, expandRows: !props.isHeightAuto, headerAlignElRef: _this.headerElRef, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, forPrint: props.forPrint });
    };
    return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, resourceDayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);
  };
  return ResourceDayTableView2;
}(TableView);
function buildResourceDayTableModel(dateProfile, dateProfileGenerator, resources, datesAboveResources, context) {
  var dayTable = buildDayTableModel(dateProfile, dateProfileGenerator);
  return datesAboveResources ? new DayResourceTableModel(dayTable, resources, context) : new ResourceDayTableModel(dayTable, resources, context);
}
var main5 = createPlugin({
  deps: [
    main_default6,
    main_default5,
    main_default
  ],
  initialView: "resourceDayGridDay",
  views: {
    resourceDayGrid: {
      type: "dayGrid",
      component: ResourceDayTableView,
      needsResourceData: true
    },
    resourceDayGridDay: {
      type: "resourceDayGrid",
      duration: { days: 1 }
    },
    resourceDayGridWeek: {
      type: "resourceDayGrid",
      duration: { weeks: 1 }
    },
    resourceDayGridMonth: {
      type: "resourceDayGrid",
      duration: { months: 1 },
      monthMode: true,
      fixedWeekCount: true
    }
  }
});

// node_modules/@fullcalendar/resource-timegrid/main.js
var ResourceDayTimeColsJoiner = function(_super) {
  __extends(ResourceDayTimeColsJoiner2, _super);
  function ResourceDayTimeColsJoiner2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ResourceDayTimeColsJoiner2.prototype.transformSeg = function(seg, resourceDayTable, resourceI) {
    return [
      __assign(__assign({}, seg), { col: resourceDayTable.computeCol(seg.col, resourceI) })
    ];
  };
  return ResourceDayTimeColsJoiner2;
}(VResourceJoiner);
var ResourceDayTimeCols = function(_super) {
  __extends(ResourceDayTimeCols2, _super);
  function ResourceDayTimeCols2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.buildDayRanges = memoize(buildDayRanges);
    _this.splitter = new VResourceSplitter();
    _this.slicers = {};
    _this.joiner = new ResourceDayTimeColsJoiner();
    _this.timeColsRef = createRef();
    _this.isHitComboAllowed = function(hit0, hit1) {
      var allowAcrossResources = _this.dayRanges.length === 1;
      return allowAcrossResources || hit0.dateSpan.resourceId === hit1.dateSpan.resourceId;
    };
    return _this;
  }
  ResourceDayTimeCols2.prototype.render = function() {
    var _this = this;
    var _a = this, props = _a.props, context = _a.context;
    var dateEnv = context.dateEnv, options = context.options;
    var dateProfile = props.dateProfile, resourceDayTableModel = props.resourceDayTableModel;
    var dayRanges = this.dayRanges = this.buildDayRanges(resourceDayTableModel.dayTableModel, dateProfile, dateEnv);
    var splitProps = this.splitter.splitProps(props);
    this.slicers = mapHash(splitProps, function(split, resourceId) {
      return _this.slicers[resourceId] || new DayTimeColsSlicer();
    });
    var slicedProps = mapHash(this.slicers, function(slicer, resourceId) {
      return slicer.sliceProps(splitProps[resourceId], dateProfile, null, context, dayRanges);
    });
    return createElement(NowTimer, { unit: options.nowIndicator ? "minute" : "day" }, function(nowDate, todayRange) {
      return createElement(TimeCols, __assign({ ref: _this.timeColsRef }, _this.joiner.joinProps(slicedProps, resourceDayTableModel), { dateProfile, axis: props.axis, slotDuration: props.slotDuration, slatMetas: props.slatMetas, cells: resourceDayTableModel.cells[0], tableColGroupNode: props.tableColGroupNode, tableMinWidth: props.tableMinWidth, clientWidth: props.clientWidth, clientHeight: props.clientHeight, expandRows: props.expandRows, nowDate, nowIndicatorSegs: options.nowIndicator && _this.buildNowIndicatorSegs(nowDate), todayRange, onScrollTopRequest: props.onScrollTopRequest, forPrint: props.forPrint, onSlatCoords: props.onSlatCoords, isHitComboAllowed: _this.isHitComboAllowed }));
    });
  };
  ResourceDayTimeCols2.prototype.buildNowIndicatorSegs = function(date) {
    var nonResourceSegs = this.slicers[""].sliceNowDate(date, this.context, this.dayRanges);
    return this.joiner.expandSegs(this.props.resourceDayTableModel, nonResourceSegs);
  };
  return ResourceDayTimeCols2;
}(DateComponent);
var ResourceDayTimeColsView = function(_super) {
  __extends(ResourceDayTimeColsView2, _super);
  function ResourceDayTimeColsView2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.flattenResources = memoize(flattenResources);
    _this.buildResourceTimeColsModel = memoize(buildResourceTimeColsModel);
    _this.buildSlatMetas = memoize(buildSlatMetas);
    return _this;
  }
  ResourceDayTimeColsView2.prototype.render = function() {
    var _this = this;
    var _a = this, props = _a.props, context = _a.context;
    var options = context.options, dateEnv = context.dateEnv;
    var dateProfile = props.dateProfile;
    var splitProps = this.allDaySplitter.splitProps(props);
    var resourceOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;
    var resources = this.flattenResources(props.resourceStore, resourceOrderSpecs);
    var resourceDayTableModel = this.buildResourceTimeColsModel(dateProfile, context.dateProfileGenerator, resources, options.datesAboveResources, context);
    var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);
    var dayMinWidth = options.dayMinWidth;
    var hasAttachedAxis = !dayMinWidth;
    var hasDetachedAxis = dayMinWidth;
    var headerContent = options.dayHeaders && createElement(ResourceDayHeader, { resources, dates: resourceDayTableModel.dayTableModel.headerDates, dateProfile, datesRepDistinctDays: true, renderIntro: hasAttachedAxis ? this.renderHeadAxis : null });
    var allDayContent = options.allDaySlot !== false && function(contentArg) {
      return createElement(ResourceDayTable, __assign({}, splitProps.allDay, { dateProfile, resourceDayTableModel, nextDayThreshold: options.nextDayThreshold, tableMinWidth: contentArg.tableMinWidth, colGroupNode: contentArg.tableColGroupNode, renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null, showWeekNumbers: false, expandRows: false, headerAlignElRef: _this.headerElRef, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, forPrint: props.forPrint }, _this.getAllDayMaxEventProps()));
    };
    var timeGridContent = function(contentArg) {
      return createElement(ResourceDayTimeCols, __assign({}, splitProps.timed, { dateProfile, axis: hasAttachedAxis, slotDuration: options.slotDuration, slatMetas, resourceDayTableModel, tableColGroupNode: contentArg.tableColGroupNode, tableMinWidth: contentArg.tableMinWidth, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, onSlatCoords: _this.handleSlatCoords, expandRows: contentArg.expandRows, forPrint: props.forPrint, onScrollTopRequest: _this.handleScrollTopRequest }));
    };
    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, resourceDayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);
  };
  return ResourceDayTimeColsView2;
}(TimeColsView);
function buildResourceTimeColsModel(dateProfile, dateProfileGenerator, resources, datesAboveResources, context) {
  var dayTable = buildTimeColsModel(dateProfile, dateProfileGenerator);
  return datesAboveResources ? new DayResourceTableModel(dayTable, resources, context) : new ResourceDayTableModel(dayTable, resources, context);
}
var main6 = createPlugin({
  deps: [
    main_default3,
    main_default5,
    main_default2
  ],
  initialView: "resourceTimeGridDay",
  views: {
    resourceTimeGrid: {
      type: "timeGrid",
      component: ResourceDayTimeColsView,
      needsResourceData: true
    },
    resourceTimeGridDay: {
      type: "resourceTimeGrid",
      duration: { days: 1 }
    },
    resourceTimeGridWeek: {
      type: "resourceTimeGrid",
      duration: { weeks: 1 }
    }
  }
});
var main_default7 = main6;
export {
  ResourceDayTimeCols,
  ResourceDayTimeColsView,
  main_default7 as default
};
/*!
FullCalendar Scheduler v5.11.3
Docs & License: https://fullcalendar.io/scheduler
(c) 2022 Adam Shaw
*/
/*!
FullCalendar Scheduler v5.11.5
Docs & License: https://fullcalendar.io/scheduler
(c) 2022 Adam Shaw
*/
//# sourceMappingURL=@fullcalendar_resource-timegrid.js.map
