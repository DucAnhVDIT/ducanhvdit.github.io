{
  "version": 3,
  "sources": ["../../@fullcalendar/resource-timegrid/node_modules/@fullcalendar/premium-common/src/license.tsx", "../../@fullcalendar/resource-timegrid/node_modules/@fullcalendar/premium-common/src/options.ts", "../../@fullcalendar/resource-timegrid/node_modules/@fullcalendar/premium-common/src/main.ts", "../../@fullcalendar/resource-common/node_modules/@fullcalendar/premium-common/src/license.tsx", "../../@fullcalendar/resource-common/node_modules/@fullcalendar/premium-common/src/options.ts", "../../@fullcalendar/resource-common/node_modules/@fullcalendar/premium-common/src/main.ts", "../../@fullcalendar/resource-common/src/EventDragging.ts", "../../@fullcalendar/resource-common/src/View.ts", "../../@fullcalendar/resource-common/src/ResourceEventConfigAdder.ts", "../../@fullcalendar/resource-common/src/structs/resource-source-def.ts", "../../@fullcalendar/resource-common/src/structs/resource-source-parse.ts", "../../@fullcalendar/resource-common/src/reducers/resourceSource.ts", "../../@fullcalendar/resource-common/src/structs/resource.ts", "../../@fullcalendar/resource-common/src/reducers/resourceStore.ts", "../../@fullcalendar/resource-common/src/reducers/resourceEntityExpansions.ts", "../../@fullcalendar/resource-common/src/reducers/resources.ts", "../../@fullcalendar/resource-common/src/structs/event-parse.ts", "../../@fullcalendar/resource-common/src/DateSelecting.ts", "../../@fullcalendar/resource-common/src/api/ResourceApi.ts", "../../@fullcalendar/resource-common/src/api/CalendarApi-extend.ts", "../../@fullcalendar/resource-common/src/common/ResourceSplitter.ts", "../../@fullcalendar/resource-common/src/validation.ts", "../../@fullcalendar/resource-common/src/ExternalElementDragging.ts", "../../@fullcalendar/resource-common/src/api/EventApi-extend.ts", "../../@fullcalendar/resource-common/src/option-change-handlers.ts", "../../@fullcalendar/resource-common/src/resources-crud.ts", "../../@fullcalendar/resource-common/src/options.ts", "../../@fullcalendar/resource-common/src/resource-sources/resource-array.ts", "../../@fullcalendar/resource-common/src/resource-sources/resource-func.ts", "../../@fullcalendar/resource-common/src/resource-sources/resource-json-feed.ts", "../../@fullcalendar/resource-common/src/common/ResourceLabelRoot.tsx", "../../@fullcalendar/resource-common/src/common/ResourceCell.tsx", "../../@fullcalendar/resource-common/src/common/ResourceDayHeader.tsx", "../../@fullcalendar/resource-common/src/common/ResourceIndex.ts", "../../@fullcalendar/resource-common/src/common/AbstractResourceDayTableModel.tsx", "../../@fullcalendar/resource-common/src/common/ResourceDayTableModel.ts", "../../@fullcalendar/resource-common/src/common/DayResourceTableModel.ts", "../../@fullcalendar/resource-common/src/common/VResourceJoiner.ts", "../../@fullcalendar/resource-common/src/common/VResourceSplitter.ts", "../../@fullcalendar/resource-common/src/common/resource-hierarchy.ts", "../../@fullcalendar/resource-common/src/main.ts", "../../@fullcalendar/resource-daygrid/node_modules/@fullcalendar/premium-common/src/license.tsx", "../../@fullcalendar/resource-daygrid/node_modules/@fullcalendar/premium-common/src/options.ts", "../../@fullcalendar/resource-daygrid/node_modules/@fullcalendar/premium-common/src/main.ts", "../../@fullcalendar/resource-daygrid/src/ResourceDayTableJoiner.ts", "../../@fullcalendar/resource-daygrid/src/ResourceDayTable.tsx", "../../@fullcalendar/resource-daygrid/src/ResourceDayTableView.tsx", "../../@fullcalendar/resource-daygrid/src/main.ts", "../../@fullcalendar/resource-timegrid/src/ResourceDayTimeColsJoiner.ts", "../../@fullcalendar/resource-timegrid/src/ResourceDayTimeCols.tsx", "../../@fullcalendar/resource-timegrid/src/ResourceDayTimeColsView.tsx", "../../@fullcalendar/resource-timegrid/src/main.ts"],
  "sourcesContent": ["import { config, isValidDate, addDays, createElement, CalendarContext, Fragment } from '@fullcalendar/common'\n\nconst RELEASE_DATE = '<%= releaseDate %>' // for Scheduler\nconst UPGRADE_WINDOW = 365 + 7 // days. 1 week leeway, for tz shift reasons too\nconst INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid'\nconst OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated'\nconst PRESET_LICENSE_KEYS = [\n  'GPL-My-Project-Is-Open-Source',\n  'CC-Attribution-NonCommercial-NoDerivatives',\n]\nconst CSS = {\n  position: 'absolute' as 'absolute', // for TS+React. ugh.\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px',\n}\n\nexport function buildLicenseWarning(context: CalendarContext) {\n  let key = context.options.schedulerLicenseKey\n  let currentUrl = typeof window !== 'undefined' ? window.location.href : ''\n\n  if (!isImmuneUrl(currentUrl)) {\n    let status = processLicenseKey(key)\n\n    if (status !== 'valid') {\n      return (\n        <div className=\"fc-license-message\" style={CSS}>\n          {(status === 'outdated') ? (\n            <Fragment>\n              {'Your license key is too old to work with this version. '}\n              <a href={OUTDATED_LICENSE_URL}>More Info</a>\n            </Fragment>\n          ) : (\n            <Fragment>\n              {'Your license key is invalid. '}\n              <a href={INVALID_LICENSE_URL}>More Info</a>\n            </Fragment>\n          )}\n        </div>\n      )\n    }\n  }\n\n  return null\n}\n\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid'\n  }\n\n  const parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/)\n\n  if (parts && (parts[1].length === 10)) {\n    const purchaseDate = new Date(parseInt(parts[2], 10) * 1000)\n    const releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE)\n\n    if (isValidDate(releaseDate)) { // token won't be replaced in dev mode\n      const minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW)\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid'\n      }\n\n      return 'outdated'\n    }\n  }\n\n  return 'invalid'\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url)\n}\n", "export const OPTION_REFINERS = {\n  schedulerLicenseKey: String,\n}\n", "import { createPlugin } from '@fullcalendar/common'\nimport { buildLicenseWarning } from './license'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning],\n})\n", "import { config, isValidDate, addDays, createElement, CalendarContext, Fragment } from '@fullcalendar/common'\n\nconst RELEASE_DATE = '<%= releaseDate %>' // for Scheduler\nconst UPGRADE_WINDOW = 365 + 7 // days. 1 week leeway, for tz shift reasons too\nconst INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid'\nconst OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated'\nconst PRESET_LICENSE_KEYS = [\n  'GPL-My-Project-Is-Open-Source',\n  'CC-Attribution-NonCommercial-NoDerivatives',\n]\nconst CSS = {\n  position: 'absolute' as 'absolute', // for TS+React. ugh.\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px',\n}\n\nexport function buildLicenseWarning(context: CalendarContext) {\n  let key = context.options.schedulerLicenseKey\n  let currentUrl = typeof window !== 'undefined' ? window.location.href : ''\n\n  if (!isImmuneUrl(currentUrl)) {\n    let status = processLicenseKey(key)\n\n    if (status !== 'valid') {\n      return (\n        <div className=\"fc-license-message\" style={CSS}>\n          {(status === 'outdated') ? (\n            <Fragment>\n              {'Your license key is too old to work with this version. '}\n              <a href={OUTDATED_LICENSE_URL}>More Info</a>\n            </Fragment>\n          ) : (\n            <Fragment>\n              {'Your license key is invalid. '}\n              <a href={INVALID_LICENSE_URL}>More Info</a>\n            </Fragment>\n          )}\n        </div>\n      )\n    }\n  }\n\n  return null\n}\n\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid'\n  }\n\n  const parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/)\n\n  if (parts && (parts[1].length === 10)) {\n    const purchaseDate = new Date(parseInt(parts[2], 10) * 1000)\n    const releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE)\n\n    if (isValidDate(releaseDate)) { // token won't be replaced in dev mode\n      const minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW)\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid'\n      }\n\n      return 'outdated'\n    }\n  }\n\n  return 'invalid'\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url)\n}\n", "export const OPTION_REFINERS = {\n  schedulerLicenseKey: String,\n}\n", "import { createPlugin } from '@fullcalendar/common'\nimport { buildLicenseWarning } from './license'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning],\n})\n", "import { EventMutation, Hit, EventDef, CalendarContext, EventDropArg } from '@fullcalendar/common'\n\nexport function massageEventDragMutation(eventMutation: EventMutation, hit0: Hit, hit1: Hit) {\n  let resource0 = hit0.dateSpan.resourceId\n  let resource1 = hit1.dateSpan.resourceId\n\n  if (\n    resource0 && resource1 &&\n    resource0 !== resource1\n  ) {\n    eventMutation.resourceMutation = {\n      matchResourceId: resource0,\n      setResourceId: resource1,\n    }\n  }\n}\n\n/*\nTODO: all this would be much easier if we were using a hash!\n*/\nexport function applyEventDefMutation(eventDef: EventDef, mutation: EventMutation, context: CalendarContext) {\n  let resourceMutation = mutation.resourceMutation\n\n  if (resourceMutation && computeResourceEditable(eventDef, context)) {\n    let index = eventDef.resourceIds.indexOf(resourceMutation.matchResourceId)\n\n    if (index !== -1) {\n      let resourceIds = eventDef.resourceIds.slice() // copy\n\n      resourceIds.splice(index, 1) // remove\n\n      if (resourceIds.indexOf(resourceMutation.setResourceId) === -1) { // not already in there\n        resourceIds.push(resourceMutation.setResourceId) // add\n      }\n\n      eventDef.resourceIds = resourceIds\n    }\n  }\n}\n\n/*\nHACK\nTODO: use EventUi system instead of this\n*/\nexport function computeResourceEditable(eventDef: EventDef, context: CalendarContext): boolean {\n  let { resourceEditable } = eventDef\n\n  if (resourceEditable == null) {\n    let source = eventDef.sourceId && context.getCurrentData().eventSources[eventDef.sourceId]\n\n    if (source) {\n      resourceEditable = source.extendedProps.resourceEditable // used the Source::extendedProps hack\n    }\n\n    if (resourceEditable == null) {\n      resourceEditable = context.options.eventResourceEditable\n\n      if (resourceEditable == null) {\n        resourceEditable = context.options.editable // TODO: use defaults system instead\n      }\n    }\n  }\n\n  return resourceEditable\n}\n\nexport function transformEventDrop(mutation: EventMutation, context: CalendarContext): Partial<EventDropArg> {\n  let { resourceMutation } = mutation\n\n  if (resourceMutation) {\n    let { calendarApi } = context\n\n    return {\n      oldResource: calendarApi.getResourceById(resourceMutation.matchResourceId),\n      newResource: calendarApi.getResourceById(resourceMutation.setResourceId),\n    }\n  }\n\n  return {\n    oldResource: null,\n    newResource: null,\n  }\n}\n", "import {\n  rangesIntersect, EventInstanceHash, filterHash, ViewProps, ViewPropsTransformer, CalendarContentProps, memoize,\n  EventUi, EventDefHash, EventDef, EventStore, DateRange, CalendarContext,\n} from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { ResourceHash } from './structs/resource'\nimport { ResourceEntityExpansions } from './reducers/resourceEntityExpansions'\nimport { computeResourceEditable } from './EventDragging'\n\n// for when resource views need resource data\n\nexport interface ResourceViewProps extends ViewProps {\n  resourceStore: ResourceHash\n  resourceEntityExpansions: ResourceEntityExpansions\n}\n\nexport class ResourceDataAdder implements ViewPropsTransformer {\n  filterResources = memoize(filterResources)\n\n  transform(viewProps: ViewProps, calendarProps: CalendarContentProps) {\n    if (calendarProps.viewSpec.optionDefaults.needsResourceData) {\n      return {\n        resourceStore: this.filterResources(\n          calendarProps.resourceStore,\n          calendarProps.options.filterResourcesWithEvents,\n          calendarProps.eventStore,\n          calendarProps.dateProfile.activeRange,\n        ),\n        resourceEntityExpansions: calendarProps.resourceEntityExpansions,\n      }\n    }\n    return null\n  }\n}\n\nfunction filterResources(\n  resourceStore: ResourceHash,\n  doFilterResourcesWithEvents: boolean,\n  eventStore: EventStore,\n  activeRange: DateRange,\n): ResourceHash {\n  if (doFilterResourcesWithEvents) {\n    let instancesInRange = filterEventInstancesInRange(eventStore.instances, activeRange)\n    let hasEvents = computeHasEvents(instancesInRange, eventStore.defs)\n\n    __assign(hasEvents, computeAncestorHasEvents(hasEvents, resourceStore))\n\n    return filterHash(resourceStore, (resource, resourceId) => hasEvents[resourceId])\n  }\n\n  return resourceStore\n}\n\nfunction filterEventInstancesInRange(eventInstances: EventInstanceHash, activeRange: DateRange) {\n  return filterHash(eventInstances, (eventInstance) => rangesIntersect(eventInstance.range, activeRange))\n}\n\nfunction computeHasEvents(eventInstances: EventInstanceHash, eventDefs: EventDefHash) {\n  let hasEvents = {}\n\n  for (let instanceId in eventInstances) {\n    let instance = eventInstances[instanceId]\n\n    for (let resourceId of eventDefs[instance.defId].resourceIds) {\n      hasEvents[resourceId] = true\n    }\n  }\n\n  return hasEvents\n}\n\n/*\nmark resources as having events if any of their ancestors have them\nNOTE: resourceStore might not have all the resources that hasEvents{} has keyed\n*/\nfunction computeAncestorHasEvents(hasEvents: { [resourceId: string]: boolean }, resourceStore: ResourceHash) {\n  let res = {}\n\n  for (let resourceId in hasEvents) {\n    let resource\n\n    while ((resource = resourceStore[resourceId])) {\n      resourceId = resource.parentId // now functioning as the parentId\n\n      if (resourceId) {\n        res[resourceId] = true\n      } else {\n        break\n      }\n    }\n  }\n\n  return res\n}\n\n/*\nfor making sure events that have editable resources are always draggable in resource views\n*/\nexport function transformIsDraggable(val: boolean, eventDef: EventDef, eventUi: EventUi, context: CalendarContext) {\n  if (!val) {\n    let state = context.getCurrentData()\n    let viewSpec = state.viewSpecs[state.currentViewType]\n\n    if (viewSpec.optionDefaults.needsResourceData) {\n      if (computeResourceEditable(eventDef, context)) {\n        return true\n      }\n    }\n  }\n\n  return val\n}\n", "import {\n  ViewProps, ViewPropsTransformer, CalendarContentProps, memoize, mapHash,\n  EventUi, isPropsEqual, EventUiHash, EventDefHash, EventDef, combineEventUis,\n} from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { ResourceHash } from './structs/resource'\n\n// for when non-resource view should be given EventUi info (for event coloring/constraints based off of resource data)\n\nexport class ResourceEventConfigAdder implements ViewPropsTransformer {\n  buildResourceEventUis = memoize(buildResourceEventUis, isPropsEqual)\n  injectResourceEventUis = memoize(injectResourceEventUis)\n\n  transform(viewProps: ViewProps, calendarProps: CalendarContentProps) {\n    if (!calendarProps.viewSpec.optionDefaults.needsResourceData) {\n      return {\n        eventUiBases: this.injectResourceEventUis(\n          viewProps.eventUiBases,\n          viewProps.eventStore.defs,\n          this.buildResourceEventUis(calendarProps.resourceStore),\n        ),\n      }\n    }\n    return null\n  }\n}\n\nfunction buildResourceEventUis(resourceStore: ResourceHash) {\n  return mapHash(resourceStore, (resource) => resource.ui)\n}\n\nfunction injectResourceEventUis(eventUiBases: EventUiHash, eventDefs: EventDefHash, resourceEventUis: EventUiHash) {\n  return mapHash(eventUiBases, (eventUi, defId) => {\n    if (defId) { // not the '' key\n      return injectResourceEventUi(eventUi, eventDefs[defId], resourceEventUis)\n    }\n    return eventUi\n  })\n}\n\nfunction injectResourceEventUi(origEventUi: EventUi, eventDef: EventDef, resourceEventUis: EventUiHash) {\n  let parts = []\n\n  // first resource takes precedence, which fights with the ordering of combineEventUis, thus the unshifts\n  for (let resourceId of eventDef.resourceIds) {\n    if (resourceEventUis[resourceId]) {\n      parts.unshift(resourceEventUis[resourceId])\n    }\n  }\n\n  parts.unshift(origEventUi)\n\n  return combineEventUis(parts)\n}\n", "import { ResourceFetcher } from './resource-source'\nimport { ResourceSourceRefined } from './resource-source-parse'\n\nexport interface ResourceSourceDef<ResourceSourceMeta> {\n  ignoreRange?: boolean\n  parseMeta: (refined: ResourceSourceRefined) => ResourceSourceMeta | null\n  fetch: ResourceFetcher<ResourceSourceMeta>\n}\n\nlet defs: ResourceSourceDef<any>[] = [] // TODO: use plugin system\n\nexport function registerResourceSourceDef<ResourceSourceMeta>(def: ResourceSourceDef<ResourceSourceMeta>) {\n  defs.push(def)\n}\n\nexport function getResourceSourceDef(id: number): ResourceSourceDef<any> {\n  return defs[id]\n}\n\nexport function getResourceSourceDefs(): ResourceSourceDef<any>[] {\n  return defs\n}\n", "import { guid, identity, Identity, RefinedOptionsFromRefiners, refineProps, RawOptionsFromRefiners, Dictionary } from '@fullcalendar/common'\nimport { ResourceInput } from './resource'\nimport { ResourceFunc } from '../resource-sources/resource-func'\nimport { ResourceSource } from './resource-source'\nimport { getResourceSourceDefs } from './resource-source-def'\n\n// TODO: make this a plugin-able parser\n// TODO: success/failure\nexport const RESOURCE_SOURCE_REFINERS = {\n  id: String,\n\n  // for array. TODO: move to resource-array\n  resources: identity as Identity<ResourceInput[] | ResourceFunc>,\n\n  // for json feed. TODO: move to resource-json-feed\n  url: String,\n  method: String,\n  startParam: String,\n  endParam: String,\n  timeZoneParam: String,\n  extraParams: identity as Identity<Dictionary | (() => Dictionary)>,\n}\n\nexport type ResourceSourceInputObject = RawOptionsFromRefiners<typeof RESOURCE_SOURCE_REFINERS>\nexport type ResourceSourceRefined = RefinedOptionsFromRefiners<typeof RESOURCE_SOURCE_REFINERS>\n\nexport type ResourceSourceInput =\n  ResourceSourceInputObject |\n  ResourceInput[] |\n  ResourceFunc |\n  string // url\n\nexport function parseResourceSource(input: ResourceSourceInput): ResourceSource<any> {\n  let inputObj: ResourceSourceInputObject\n\n  if (typeof input === 'string') {\n    inputObj = { url: input }\n  } else if (typeof input === 'function' || Array.isArray(input)) {\n    inputObj = { resources: input }\n  } else if (typeof input === 'object' && input) { // non-null object\n    inputObj = input\n  }\n\n  if (inputObj) {\n    let { refined, extra } = refineProps(inputObj, RESOURCE_SOURCE_REFINERS)\n\n    warnUnknownProps(extra)\n\n    let metaRes = buildResourceSourceMeta(refined)\n\n    if (metaRes) {\n      return {\n        _raw: input,\n        sourceId: guid(),\n        sourceDefId: metaRes.sourceDefId,\n        meta: metaRes.meta,\n        publicId: refined.id || '',\n        isFetching: false,\n        latestFetchId: '',\n        fetchRange: null,\n      }\n    }\n  }\n\n  return null\n}\n\nfunction buildResourceSourceMeta(refined: ResourceSourceRefined) {\n  let defs = getResourceSourceDefs()\n\n  for (let i = defs.length - 1; i >= 0; i -= 1) { // later-added plugins take precedence\n    let def = defs[i]\n    let meta = def.parseMeta(refined)\n\n    if (meta) {\n      return { meta, sourceDefId: i }\n    }\n  }\n\n  return null\n}\n\nfunction warnUnknownProps(props) {\n  for (let propName in props) {\n    console.warn(`Unknown resource prop '${propName}'`)\n  }\n}\n", "import { DateProfile, rangesEqual, DateRange, guid, CalendarContext } from '@fullcalendar/common'\nimport { ResourceSource } from '../structs/resource-source'\nimport { parseResourceSource } from '../structs/resource-source-parse'\nimport { getResourceSourceDef } from '../structs/resource-source-def'\nimport { ResourceAction } from './resource-action'\n\nexport function reduceResourceSource(\n  source: ResourceSource<any> | null,\n  action: ResourceAction | null,\n  context: CalendarContext & { dateProfile: DateProfile },\n): ResourceSource<any> {\n  let { options, dateProfile } = context\n\n  if (!source || !action) {\n    return createSource(\n      options.initialResources || options.resources,\n      dateProfile.activeRange,\n      options.refetchResourcesOnNavigate,\n      context,\n    )\n  }\n\n  switch (action.type) {\n    case 'RESET_RESOURCE_SOURCE':\n      return createSource(action.resourceSourceInput, dateProfile.activeRange, options.refetchResourcesOnNavigate, context)\n\n    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n    case 'NEXT':\n    case 'CHANGE_DATE':\n    case 'CHANGE_VIEW_TYPE':\n      return handleRangeChange(source, dateProfile.activeRange, options.refetchResourcesOnNavigate, context)\n\n    case 'RECEIVE_RESOURCES':\n    case 'RECEIVE_RESOURCE_ERROR':\n      return receiveResponse(source, action.fetchId, action.fetchRange)\n\n    case 'REFETCH_RESOURCES':\n      return fetchSource(source, dateProfile.activeRange, context)\n\n    default:\n      return source\n  }\n}\n\nfunction createSource(input, activeRange: DateRange, refetchResourcesOnNavigate, context: CalendarContext) {\n  if (input) {\n    let source = parseResourceSource(input)\n    source = fetchSource(source, refetchResourcesOnNavigate ? activeRange : null, context)\n    return source\n  }\n\n  return null\n}\n\nfunction handleRangeChange(\n  source: ResourceSource<any>,\n  activeRange: DateRange,\n  refetchResourcesOnNavigate,\n  context: CalendarContext,\n): ResourceSource<any> {\n  if (\n    refetchResourcesOnNavigate &&\n    !doesSourceIgnoreRange(source) &&\n    (!source.fetchRange || !rangesEqual(source.fetchRange, activeRange))\n  ) {\n    return fetchSource(source, activeRange, context)\n  }\n  return source\n}\n\nfunction doesSourceIgnoreRange(source: ResourceSource<any>) {\n  return Boolean(getResourceSourceDef(source.sourceDefId).ignoreRange)\n}\n\nfunction fetchSource(source: ResourceSource<any>, fetchRange: DateRange | null, context: CalendarContext): ResourceSource<any> {\n  let sourceDef = getResourceSourceDef(source.sourceDefId)\n  let fetchId = guid()\n\n  sourceDef.fetch(\n    {\n      resourceSource: source,\n      range: fetchRange,\n      context,\n    },\n    (res) => {\n      context.dispatch({\n        type: 'RECEIVE_RESOURCES',\n        fetchId,\n        fetchRange,\n        rawResources: res.rawResources,\n      })\n    },\n    (error) => {\n      context.dispatch({\n        type: 'RECEIVE_RESOURCE_ERROR',\n        fetchId,\n        fetchRange,\n        error,\n      })\n    },\n  )\n\n  return {\n    ...source,\n    isFetching: true,\n    latestFetchId: fetchId,\n  }\n}\n\nfunction receiveResponse(source: ResourceSource<any>, fetchId: string, fetchRange: DateRange) {\n  if (fetchId === source.latestFetchId) {\n    return {\n      ...source,\n      isFetching: false,\n      fetchRange,\n    }\n  }\n\n  return source\n}\n", "import {\n  ConstraintInput, AllowFunc, EventStore, parseBusinessHours, CalendarContext, EventUi, BusinessHoursInput,\n  guid, identity, Identity, RawOptionsFromRefiners, parseClassNames, refineProps, createEventUi, Dictionary,\n} from '@fullcalendar/common'\n\nconst PRIVATE_ID_PREFIX = '_fc:'\n\nconst RESOURCE_REFINERS = {\n  id: String,\n  parentId: String,\n  children: identity as Identity<ResourceInput[]>,\n  title: String,\n  businessHours: identity as Identity<BusinessHoursInput>,\n  extendedProps: identity as Identity<Dictionary>,\n\n  // event-ui\n  eventEditable: Boolean,\n  eventStartEditable: Boolean,\n  eventDurationEditable: Boolean,\n  eventConstraint: identity as Identity<ConstraintInput>,\n  eventOverlap: Boolean, // can NOT be a func, different from OptionsInput\n  eventAllow: identity as Identity<AllowFunc>,\n  eventClassNames: parseClassNames,\n  eventBackgroundColor: String,\n  eventBorderColor: String,\n  eventTextColor: String,\n  eventColor: String,\n}\n\ntype BuiltInResourceRefiners = typeof RESOURCE_REFINERS\n\nexport interface ResourceRefiners extends BuiltInResourceRefiners {\n  // for preventing circular definition. also, good for making ambient in the future\n}\n\nexport type ResourceInput =\n  RawOptionsFromRefiners<Required<ResourceRefiners>> & // Required hack\n  { [extendedProps: string]: any }\n\nexport interface Resource {\n  id: string\n  parentId: string\n  title: string\n  businessHours: EventStore | null // if null, will fall thru to non-resource business hours\n  ui: EventUi\n  extendedProps: { [extendedProp: string]: any }\n}\n\nexport type ResourceHash = { [resourceId: string]: Resource }\n\n/*\nneeds a full store so that it can populate children too\n*/\nexport function parseResource(raw: ResourceInput, parentId: string = '', store: ResourceHash, context: CalendarContext): Resource {\n  let { refined, extra } = refineProps(raw, RESOURCE_REFINERS)\n\n  let resource: Resource = {\n    id: refined.id || (PRIVATE_ID_PREFIX + guid()),\n    parentId: refined.parentId || parentId,\n    title: refined.title || '',\n    businessHours: refined.businessHours ? parseBusinessHours(refined.businessHours, context) : null,\n    ui: createEventUi({\n      editable: refined.eventEditable,\n      startEditable: refined.eventStartEditable,\n      durationEditable: refined.eventDurationEditable,\n      constraint: refined.eventConstraint,\n      overlap: refined.eventOverlap,\n      allow: refined.eventAllow,\n      classNames: refined.eventClassNames,\n      backgroundColor: refined.eventBackgroundColor,\n      borderColor: refined.eventBorderColor,\n      textColor: refined.eventTextColor,\n      color: refined.eventColor,\n    }, context),\n    extendedProps: {\n      ...extra,\n      ...refined.extendedProps,\n    },\n  }\n\n  // help out ResourceApi from having user modify props\n  Object.freeze(resource.ui.classNames)\n  Object.freeze(resource.extendedProps)\n\n  if (store[resource.id]) {\n    // console.warn('duplicate resource ID')\n\n  } else {\n    store[resource.id] = resource\n\n    if (refined.children) {\n      for (let childInput of refined.children) {\n        parseResource(childInput, resource.id, store, context)\n      }\n    }\n  }\n\n  return resource\n}\n\n/*\nTODO: use this in more places\n*/\nexport function getPublicId(id: string): string {\n  if (id.indexOf(PRIVATE_ID_PREFIX) === 0) {\n    return ''\n  }\n\n  return id\n}\n", "import { CalendarContext } from '@fullcalendar/common'\nimport { ResourceAction } from './resource-action'\nimport { ResourceHash, ResourceInput, parseResource } from '../structs/resource'\nimport { ResourceSource } from '../structs/resource-source'\n\nexport function reduceResourceStore(\n  store: ResourceHash | null,\n  action: ResourceAction | null,\n  source: ResourceSource<any>,\n  context: CalendarContext,\n): ResourceHash {\n  if (!store || !action) {\n    return {}\n  }\n\n  switch (action.type) {\n    case 'RECEIVE_RESOURCES':\n      return receiveRawResources(store, action.rawResources, action.fetchId, source, context)\n\n    case 'ADD_RESOURCE':\n      return addResource(store, action.resourceHash)\n\n    case 'REMOVE_RESOURCE':\n      return removeResource(store, action.resourceId)\n\n    case 'SET_RESOURCE_PROP':\n      return setResourceProp(store, action.resourceId, action.propName, action.propValue)\n\n    case 'SET_RESOURCE_EXTENDED_PROP':\n      return setResourceExtendedProp(store, action.resourceId, action.propName, action.propValue)\n\n    default:\n      return store\n  }\n}\n\nfunction receiveRawResources(\n  existingStore: ResourceHash,\n  inputs: ResourceInput[],\n  fetchId: string,\n  source: ResourceSource<any>,\n  context: CalendarContext,\n): ResourceHash {\n  if (source.latestFetchId === fetchId) {\n    let nextStore: ResourceHash = {}\n\n    for (let input of inputs) {\n      parseResource(input, '', nextStore, context)\n    }\n\n    return nextStore\n  }\n\n  return existingStore\n}\n\nfunction addResource(existingStore: ResourceHash, additions: ResourceHash) {\n  // TODO: warn about duplicate IDs\n\n  return { ...existingStore, ...additions }\n}\n\nfunction removeResource(existingStore: ResourceHash, resourceId: string) {\n  let newStore = { ...existingStore } as ResourceHash\n\n  delete newStore[resourceId]\n\n  // promote children\n  for (let childResourceId in newStore) { // a child, *maybe* but probably not\n    if (newStore[childResourceId].parentId === resourceId) {\n      newStore[childResourceId] = {\n        ...newStore[childResourceId],\n        parentId: '',\n      }\n    }\n  }\n\n  return newStore\n}\n\nfunction setResourceProp(existingStore: ResourceHash, resourceId: string, name: string, value: any): ResourceHash {\n  let existingResource = existingStore[resourceId]\n\n  // TODO: sanitization\n\n  if (existingResource) {\n    return {\n      ...existingStore,\n      [resourceId]: {\n        ...existingResource,\n        [name]: value,\n      },\n    }\n  }\n\n  return existingStore\n}\n\nfunction setResourceExtendedProp(existingStore: ResourceHash, resourceId: string, name: string, value: any): ResourceHash {\n  let existingResource = existingStore[resourceId]\n\n  if (existingResource) {\n    return {\n      ...existingStore,\n      [resourceId]: {\n        ...existingResource,\n        extendedProps: {\n          ...existingResource.extendedProps,\n          [name]: value,\n        },\n      },\n    }\n  }\n\n  return existingStore\n}\n", "import { ResourceAction } from './resource-action'\n\nexport type ResourceEntityExpansions = { [id: string]: boolean }\n\nexport function reduceResourceEntityExpansions(\n  expansions: ResourceEntityExpansions | null,\n  action: ResourceAction | null,\n): ResourceEntityExpansions {\n  if (!expansions || !action) {\n    return {}\n  }\n\n  switch (action.type) {\n    case 'SET_RESOURCE_ENTITY_EXPANDED':\n      return {\n        ...expansions,\n        [action.id]: action.isExpanded,\n      }\n\n    default:\n      return expansions\n  }\n}\n", "import { CalendarContext, DateProfile } from '@fullcalendar/common'\nimport { ResourceSource } from '../structs/resource-source'\nimport { ResourceHash } from '../structs/resource'\nimport { reduceResourceSource } from './resourceSource'\nimport { reduceResourceStore } from './resourceStore'\nimport { reduceResourceEntityExpansions, ResourceEntityExpansions } from './resourceEntityExpansions'\nimport { ResourceAction } from './resource-action'\n\nexport interface ResourceState {\n  resourceSource: ResourceSource<any>\n  resourceStore: ResourceHash\n  resourceEntityExpansions: ResourceEntityExpansions\n}\n\nexport function reduceResources(\n  state: ResourceState | null,\n  action: ResourceAction | null,\n  context: CalendarContext & { dateProfile: DateProfile },\n) {\n  let resourceSource = reduceResourceSource(state && state.resourceSource, action, context)\n  let resourceStore = reduceResourceStore(state && state.resourceStore, action, resourceSource, context)\n  let resourceEntityExpansions = reduceResourceEntityExpansions(state && state.resourceEntityExpansions, action)\n\n  return {\n    resourceSource,\n    resourceStore,\n    resourceEntityExpansions,\n  }\n}\n", "import { EventRefined, identity, Identity } from '@fullcalendar/common'\n\nexport const EVENT_REFINERS = {\n  resourceId: String,\n  resourceIds: identity as Identity<string[]>,\n  resourceEditable: Boolean,\n}\n\nexport function generateEventDefResourceMembers(refined: EventRefined) {\n  return {\n    resourceIds: ensureStringArray(refined.resourceIds)\n      .concat(refined.resourceId ? [refined.resourceId] : []),\n    resourceEditable: refined.resourceEditable,\n  }\n}\n\nfunction ensureStringArray(items: any[]) {\n  return (items || []).map((item) => String(item))\n}\n", "import { Hit } from '@fullcalendar/common'\n\nexport function transformDateSelectionJoin(hit0: Hit, hit1: Hit) {\n  let resourceId0 = hit0.dateSpan.resourceId\n  let resourceId1 = hit1.dateSpan.resourceId\n\n  if (resourceId0 && resourceId1) {\n    return { resourceId: resourceId0 }\n  }\n\n  return null\n}\n", "import { CalendarContext, EventApi, Dictionary } from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { Resource, getPublicId, ResourceHash } from '../structs/resource'\n\nexport class ResourceApi {\n  constructor(\n    private _context: CalendarContext,\n    public _resource: Resource,\n  ) {\n  }\n\n  setProp(name: string, value: any) {\n    let oldResource = this._resource\n\n    this._context.dispatch({\n      type: 'SET_RESOURCE_PROP',\n      resourceId: oldResource.id,\n      propName: name,\n      propValue: value,\n    })\n\n    this.sync(oldResource)\n  }\n\n  setExtendedProp(name: string, value: any) {\n    let oldResource = this._resource\n\n    this._context.dispatch({\n      type: 'SET_RESOURCE_EXTENDED_PROP',\n      resourceId: oldResource.id,\n      propName: name,\n      propValue: value,\n    })\n\n    this.sync(oldResource)\n  }\n\n  private sync(oldResource: Resource) {\n    let context = this._context\n    let resourceId = oldResource.id\n\n    // TODO: what if dispatch didn't complete synchronously?\n    this._resource = context.getCurrentData().resourceStore[resourceId]\n\n    context.emitter.trigger('resourceChange', {\n      oldResource: new ResourceApi(context, oldResource),\n      resource: this,\n      revert() {\n        context.dispatch({\n          type: 'ADD_RESOURCE', // function as a merge. TODO: rename\n          resourceHash: {\n            [resourceId]: oldResource,\n          },\n        })\n      },\n    })\n  }\n\n  remove() {\n    let context = this._context\n    let internalResource = this._resource\n    let resourceId = internalResource.id\n\n    context.dispatch({\n      type: 'REMOVE_RESOURCE',\n      resourceId,\n    })\n\n    context.emitter.trigger('resourceRemove', {\n      resource: this,\n      revert() {\n        context.dispatch({\n          type: 'ADD_RESOURCE', // function as a merge. TODO: rename\n          resourceHash: {\n            [resourceId]: internalResource,\n          },\n        })\n      },\n    })\n  }\n\n  getParent(): ResourceApi | null {\n    let context = this._context\n    let parentId = this._resource.parentId\n\n    if (parentId) {\n      return new ResourceApi(\n        context,\n        context.getCurrentData().resourceSource[parentId],\n      )\n    }\n\n    return null\n  }\n\n  getChildren(): ResourceApi[] {\n    let thisResourceId = this._resource.id\n    let context = this._context\n    let { resourceStore } = context.getCurrentData()\n    let childApis: ResourceApi[] = []\n\n    for (let resourceId in resourceStore) {\n      if (resourceStore[resourceId].parentId === thisResourceId) {\n        childApis.push(\n          new ResourceApi(context, resourceStore[resourceId]),\n        )\n      }\n    }\n\n    return childApis\n  }\n\n  /*\n  this is really inefficient!\n  TODO: make EventApi::resourceIds a hash or keep an index in the Calendar's state\n  */\n  getEvents(): EventApi[] {\n    let thisResourceId = this._resource.id\n    let context = this._context\n    let { defs, instances } = context.getCurrentData().eventStore\n    let eventApis: EventApi[] = []\n\n    for (let instanceId in instances) {\n      let instance = instances[instanceId]\n      let def = defs[instance.defId]\n\n      if (def.resourceIds.indexOf(thisResourceId) !== -1) { // inefficient!!!\n        eventApis.push(new EventApi(context, def, instance))\n      }\n    }\n\n    return eventApis\n  }\n\n  get id() { return getPublicId(this._resource.id) }\n  get title() { return this._resource.title }\n  get eventConstraint() { return this._resource.ui.constraints[0] || null }\n  get eventOverlap() { return this._resource.ui.overlap }\n  get eventAllow() { return this._resource.ui.allows[0] || null }\n  get eventBackgroundColor() { return this._resource.ui.backgroundColor }\n  get eventBorderColor() { return this._resource.ui.borderColor }\n  get eventTextColor() { return this._resource.ui.textColor }\n\n  // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n  get eventClassNames() { return this._resource.ui.classNames }\n  get extendedProps() { return this._resource.extendedProps }\n\n  toPlainObject(settings: { collapseExtendedProps?: boolean, collapseEventColor?: boolean } = {}) {\n    let internal = this._resource\n    let { ui } = internal\n    let publicId = this.id\n    let res: Dictionary = {}\n\n    if (publicId) {\n      res.id = publicId\n    }\n\n    if (internal.title) {\n      res.title = internal.title\n    }\n\n    if (settings.collapseEventColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) {\n      res.eventColor = ui.backgroundColor\n    } else {\n      if (ui.backgroundColor) {\n        res.eventBackgroundColor = ui.backgroundColor\n      }\n      if (ui.borderColor) {\n        res.eventBorderColor = ui.borderColor\n      }\n    }\n\n    if (ui.textColor) {\n      res.eventTextColor = ui.textColor\n    }\n\n    if (ui.classNames.length) {\n      res.eventClassNames = ui.classNames\n    }\n\n    if (Object.keys(internal.extendedProps).length) {\n      if (settings.collapseExtendedProps) {\n        __assign(res, internal.extendedProps)\n      } else {\n        res.extendedProps = internal.extendedProps\n      }\n    }\n\n    return res\n  }\n\n  toJSON() {\n    return this.toPlainObject()\n  }\n}\n\nexport function buildResourceApis(resourceStore: ResourceHash, context: CalendarContext) {\n  let resourceApis: ResourceApi[] = []\n\n  for (let resourceId in resourceStore) {\n    resourceApis.push(new ResourceApi(context, resourceStore[resourceId]))\n  }\n\n  return resourceApis\n}\n", "import { DateSpan, CalendarApi, CalendarContext } from '@fullcalendar/common'\nimport { ResourceApi } from './ResourceApi'\nimport { ResourceInput, parseResource, ResourceHash, Resource } from '../structs/resource'\n\nCalendarApi.prototype.addResource = function ( // eslint-disable-line func-names\n  this: CalendarApi,\n  input: ResourceInput | ResourceApi,\n  scrollTo = true,\n) {\n  let currentState = this.getCurrentData()\n  let resourceHash: ResourceHash\n  let resource: Resource\n\n  if (input instanceof ResourceApi) {\n    resource = input._resource\n    resourceHash = { [resource.id]: resource }\n  } else {\n    resourceHash = {}\n    resource = parseResource(input, '', resourceHash, currentState)\n  }\n\n  this.dispatch({\n    type: 'ADD_RESOURCE',\n    resourceHash,\n  })\n\n  if (scrollTo) {\n    // TODO: wait til dispatch completes somehow\n    this.trigger('_scrollRequest', { resourceId: resource.id })\n  }\n\n  let resourceApi = new ResourceApi(currentState, resource)\n\n  currentState.emitter.trigger('resourceAdd', {\n    resource: resourceApi,\n    revert: () => {\n      this.dispatch({\n        type: 'REMOVE_RESOURCE',\n        resourceId: resource.id,\n      })\n    },\n  })\n\n  return resourceApi\n}\n\nCalendarApi.prototype.getResourceById = function (this: CalendarApi, id: string) { // eslint-disable-line func-names\n  id = String(id)\n  let currentState = this.getCurrentData() // eslint-disable-line react/no-this-in-sfc\n\n  if (currentState.resourceStore) { // guard against calendar with no resource functionality\n    let rawResource = currentState.resourceStore[id]\n\n    if (rawResource) {\n      return new ResourceApi(currentState, rawResource)\n    }\n  }\n\n  return null\n}\n\nCalendarApi.prototype.getResources = function (this: CalendarApi): ResourceApi[] { // eslint-disable-line func-names\n  let currentState = this.getCurrentData()\n  let { resourceStore } = currentState\n  let resourceApis: ResourceApi[] = []\n\n  if (resourceStore) { // guard against calendar with no resource functionality\n    for (let resourceId in resourceStore) {\n      resourceApis.push(\n        new ResourceApi(currentState, resourceStore[resourceId]),\n      )\n    }\n  }\n\n  return resourceApis\n}\n\nCalendarApi.prototype.getTopLevelResources = function (this: CalendarApi): ResourceApi[] { // eslint-disable-line func-names\n  let currentState = this.getCurrentData()\n  let { resourceStore } = currentState\n  let resourceApis: ResourceApi[] = []\n\n  if (resourceStore) { // guard against calendar with no resource functionality\n    for (let resourceId in resourceStore) {\n      if (!resourceStore[resourceId].parentId) {\n        resourceApis.push(\n          new ResourceApi(currentState, resourceStore[resourceId]),\n        )\n      }\n    }\n  }\n\n  return resourceApis\n}\n\nCalendarApi.prototype.refetchResources = function (this: CalendarApi) { // eslint-disable-line func-names\n  this.dispatch({\n    type: 'REFETCH_RESOURCES',\n  })\n}\n\nexport function transformDatePoint(dateSpan: DateSpan, context: CalendarContext) {\n  return dateSpan.resourceId ?\n    { resource: context.calendarApi.getResourceById(dateSpan.resourceId) } :\n    {}\n}\n\nexport function transformDateSpan(dateSpan: DateSpan, context: CalendarContext) {\n  return dateSpan.resourceId ?\n    { resource: context.calendarApi.getResourceById(dateSpan.resourceId) } :\n    {}\n}\n", "import { Splitter, SplittableProps, DateSpan, EventDef } from '@fullcalendar/common'\nimport { ResourceHash } from '../structs/resource'\n\nexport interface SplittableResourceProps extends SplittableProps {\n  resourceStore: ResourceHash\n}\n\n/*\nsplits things BASED OFF OF which resources they are associated with.\ncreates a '' entry which is when something has NO resource.\n*/\nexport class ResourceSplitter extends Splitter<SplittableResourceProps> {\n  getKeyInfo(props: SplittableResourceProps) {\n    return {\n      '': {}, // needed for non-resource\n      ...props.resourceStore, // already has `ui` and `businessHours` keys!\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    return [dateSpan.resourceId || '']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    let resourceIds = eventDef.resourceIds\n\n    if (!resourceIds.length) {\n      return ['']\n    }\n\n    return resourceIds\n  }\n}\n", "import { SplittableProps, EventUi, isPropsValid, Constraint, EventStore, mergeEventStores, CalendarContext } from '@fullcalendar/common'\nimport { ResourceSplitter } from './common/ResourceSplitter'\n\nexport function isPropsValidWithResources(combinedProps: SplittableProps, context: CalendarContext): boolean {\n  let splitter = new ResourceSplitter()\n\n  let sets = splitter.splitProps({\n    ...combinedProps,\n    resourceStore: context.getCurrentData().resourceStore,\n  })\n\n  for (let resourceId in sets) {\n    let props = sets[resourceId]\n\n    // merge in event data from the non-resource segment\n    if (resourceId && sets['']) { // current segment is not the non-resource one, and there IS a non-resource one\n      props = {\n        ...props,\n        eventStore: mergeEventStores(sets[''].eventStore, props.eventStore),\n        eventUiBases: { ...sets[''].eventUiBases, ...props.eventUiBases },\n      }\n    }\n\n    if (!isPropsValid(props, context, { resourceId }, filterConfig.bind(null, resourceId))) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction filterConfig(resourceId, config: EventUi) {\n  return {\n    ...config,\n    constraints: filterConstraints(resourceId, config.constraints),\n  }\n}\n\nfunction filterConstraints(resourceId: string, constraints: Constraint[]) {\n  return constraints.map((constraint) => {\n    let defs = (constraint as EventStore).defs\n    if (defs) { // we are dealing with an EventStore\n      // if any of the events define constraints to resources that are NOT this resource,\n      // then this resource is unconditionally prohibited, which is what a `false` value does.\n      for (let defId in defs) {\n        let resourceIds = defs[defId].resourceIds\n        if (resourceIds.length && resourceIds.indexOf(resourceId) === -1) { // TODO: use a hash?!!! (for other reasons too)\n          return false\n        }\n      }\n    }\n\n    return constraint\n  })\n}\n", "import { DateSpan } from '@fullcalendar/common'\n\nexport function transformExternalDef(dateSpan: DateSpan) {\n  return dateSpan.resourceId ?\n    { resourceId: dateSpan.resourceId } :\n    {}\n}\n", "import { EventApi } from '@fullcalendar/common'\nimport { ResourceApi } from './ResourceApi'\n\nEventApi.prototype.getResources = function (this: EventApi): ResourceApi[] { // eslint-disable-line func-names\n  let { calendarApi } = this._context\n\n  return this._def.resourceIds.map((resourceId) => calendarApi.getResourceById(resourceId))\n}\n\nEventApi.prototype.setResources = function ( // eslint-disable-line func-names\n  this: EventApi,\n  resources: (string | ResourceApi)[],\n) {\n  let resourceIds = []\n\n  // massage resources -> resourceIds\n  for (let resource of resources) {\n    let resourceId = null\n\n    if (typeof resource === 'string') {\n      resourceId = resource\n    } else if (typeof resource === 'number') {\n      resourceId = String(resource)\n    } else if (resource instanceof ResourceApi) {\n      resourceId = resource.id // guaranteed to always have an ID. hmmm\n    } else {\n      console.warn('unknown resource type: ' + resource)\n    }\n\n    if (resourceId) {\n      resourceIds.push(resourceId)\n    }\n  }\n\n  this.mutate({\n    standardProps: {\n      resourceIds,\n    },\n  })\n}\n", "import { CalendarContext } from '@fullcalendar/common'\n\nexport const optionChangeHandlers = {\n  resources: handleResources,\n}\n\nfunction handleResources(newSourceInput, context: CalendarContext) {\n  let oldSourceInput = context.getCurrentData().resourceSource._raw\n\n  if (oldSourceInput !== newSourceInput) {\n    context.dispatch({\n      type: 'RESET_RESOURCE_SOURCE',\n      resourceSourceInput: newSourceInput,\n    })\n  }\n}\n", "import { CalendarData, parseFieldSpecs } from '@fullcalendar/common'\nimport { buildResourceApis, ResourceApi } from './api/ResourceApi'\nimport { ResourceHash } from './structs/resource'\n\nexport const DEFAULT_RESOURCE_ORDER = parseFieldSpecs('id,title')\n\nexport interface ResourceAddArg {\n  resource: ResourceApi\n  revert: () => void\n}\n\nexport interface ResourceChangeArg {\n  oldResource: ResourceApi\n  resource: ResourceApi\n  revert: () => void\n}\n\nexport interface ResourceRemoveArg {\n  resource: ResourceApi\n  revert: () => void\n}\n\nexport function handleResourceStore(resourceStore: ResourceHash, calendarData: CalendarData) {\n  let { emitter } = calendarData\n\n  if (emitter.hasHandlers('resourcesSet')) {\n    emitter.trigger('resourcesSet', buildResourceApis(resourceStore, calendarData))\n  }\n}\n", "import {\n  Identity, CssDimValue, ClassNamesGenerator, CustomContentGenerator, DidMountHandler, WillUnmountHandler,\n  identity, parseFieldSpecs,\n} from '@fullcalendar/common'\n\n// public\nimport {\n  ResourceSourceInput,\n  ResourceLabelContentArg, ResourceLabelMountArg,\n  ColSpec,\n  ColHeaderContentArg, ColHeaderMountArg,\n  ColCellContentArg, ColCellMountArg,\n  ResourceLaneContentArg, ResourceLaneMountArg,\n  ResourceApi,\n  ResourceAddArg, ResourceChangeArg, ResourceRemoveArg,\n} from './api-type-deps'\n\nexport const OPTION_REFINERS = {\n  initialResources: identity as Identity<ResourceSourceInput>,\n  resources: identity as Identity<ResourceSourceInput>,\n\n  eventResourceEditable: Boolean,\n  refetchResourcesOnNavigate: Boolean,\n  resourceOrder: parseFieldSpecs,\n  filterResourcesWithEvents: Boolean,\n  resourceGroupField: String,\n  resourceAreaWidth: identity as Identity<CssDimValue>,\n  resourceAreaColumns: identity as Identity<ColSpec[]>,\n  resourcesInitiallyExpanded: Boolean,\n  datesAboveResources: Boolean,\n  needsResourceData: Boolean, // internal-only\n\n  resourceAreaHeaderClassNames: identity as Identity<ClassNamesGenerator<ColHeaderContentArg>>,\n  resourceAreaHeaderContent: identity as Identity<CustomContentGenerator<ColHeaderContentArg>>,\n  resourceAreaHeaderDidMount: identity as Identity<DidMountHandler<ColHeaderMountArg>>,\n  resourceAreaHeaderWillUnmount: identity as Identity<WillUnmountHandler<ColHeaderMountArg>>,\n\n  resourceGroupLabelClassNames: identity as Identity<ClassNamesGenerator<ColCellContentArg>>,\n  resourceGroupLabelContent: identity as Identity<CustomContentGenerator<ColCellContentArg>>,\n  resourceGroupLabelDidMount: identity as Identity<DidMountHandler<ColCellMountArg>>,\n  resourceGroupLabelWillUnmount: identity as Identity<WillUnmountHandler<ColCellMountArg>>,\n\n  resourceLabelClassNames: identity as Identity<ClassNamesGenerator<ResourceLabelContentArg>>,\n  resourceLabelContent: identity as Identity<CustomContentGenerator<ResourceLabelContentArg>>,\n  resourceLabelDidMount: identity as Identity<DidMountHandler<ResourceLabelMountArg>>,\n  resourceLabelWillUnmount: identity as Identity<WillUnmountHandler<ResourceLabelMountArg>>,\n\n  resourceLaneClassNames: identity as Identity<ClassNamesGenerator<ResourceLaneContentArg>>,\n  resourceLaneContent: identity as Identity<CustomContentGenerator<ResourceLaneContentArg>>,\n  resourceLaneDidMount: identity as Identity<DidMountHandler<ResourceLaneMountArg>>,\n  resourceLaneWillUnmount: identity as Identity<WillUnmountHandler<ResourceLaneMountArg>>,\n\n  resourceGroupLaneClassNames: identity as Identity<ClassNamesGenerator<ColCellContentArg>>,\n  resourceGroupLaneContent: identity as Identity<CustomContentGenerator<ColCellContentArg>>,\n  resourceGroupLaneDidMount: identity as Identity<DidMountHandler<ColCellMountArg>>,\n  resourceGroupLaneWillUnmount: identity as Identity<WillUnmountHandler<ColCellMountArg>>,\n}\n\nexport const LISTENER_REFINERS = {\n  resourcesSet: identity as Identity<(resources: ResourceApi[]) => void>,\n  resourceAdd: identity as Identity<(arg: ResourceAddArg) => void>,\n  resourceChange: identity as Identity<(arg: ResourceChangeArg) => void>,\n  resourceRemove: identity as Identity<(arg: ResourceRemoveArg) => void>,\n}\n", "import { registerResourceSourceDef } from '../structs/resource-source-def'\nimport { ResourceInput } from '../structs/resource'\nimport { ResourceSourceRefined } from '../structs/resource-source-parse'\n\nregisterResourceSourceDef<ResourceInput[]>({\n\n  ignoreRange: true,\n\n  parseMeta(refined: ResourceSourceRefined) {\n    if (Array.isArray(refined.resources)) {\n      return refined.resources\n    }\n    return null\n  },\n\n  fetch(arg, successCallback) {\n    successCallback({\n      rawResources: arg.resourceSource.meta,\n    })\n  },\n\n})\n", "import { unpromisify } from '@fullcalendar/common'\nimport { ResourceSourceError } from '../structs/resource-source'\nimport { registerResourceSourceDef } from '../structs/resource-source-def'\nimport { ResourceInput } from '../structs/resource'\nimport { ResourceSourceRefined } from '../structs/resource-source-parse'\n\nexport interface ResourceFuncArg {\n  start?: Date\n  end?: Date\n  startStr?: string\n  endStr?: string\n  timeZone?: string\n}\n\nexport type ResourceFunc = (\n  arg: ResourceFuncArg,\n  successCallback: (events: ResourceInput[]) => void,\n  failureCallback: (errorObj: ResourceSourceError) => void\n) => any // TODO: promise-like object or nothing\n\nregisterResourceSourceDef<ResourceFunc>({\n\n  parseMeta(refined: ResourceSourceRefined) {\n    if (typeof refined.resources === 'function') {\n      return refined.resources\n    }\n    return null\n  },\n\n  fetch(arg, success, failure) {\n    let dateEnv = arg.context.dateEnv\n    let func = arg.resourceSource.meta\n\n    let publicArg: ResourceFuncArg = arg.range ? {\n      start: dateEnv.toDate(arg.range.start),\n      end: dateEnv.toDate(arg.range.end),\n      startStr: dateEnv.formatIso(arg.range.start),\n      endStr: dateEnv.formatIso(arg.range.end),\n      timeZone: dateEnv.timeZone,\n    } : {}\n\n    // TODO: make more dry with EventSourceFunc\n    // TODO: accept a response?\n    unpromisify(\n      func.bind(null, publicArg),\n      (rawResources) => { // success\n        success({ rawResources }) // needs an object response\n      },\n      failure, // send errorObj directly to failure callback\n    )\n  },\n\n})\n", "import { DateRange, CalendarContext, requestJson, Dictionary } from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { registerResourceSourceDef } from '../structs/resource-source-def'\nimport { ResourceSourceRefined } from '../structs/resource-source-parse'\n\ninterface JsonFeedMeta {\n  url: string\n  method: string\n  startParam?: string\n  endParam?: string\n  timeZoneParam?: string\n  extraParams?: Dictionary | (() => Dictionary)\n}\n\nregisterResourceSourceDef<JsonFeedMeta>({\n\n  parseMeta(refined: ResourceSourceRefined) {\n    if (refined.url) {\n      return {\n        url: refined.url,\n        method: (refined.method || 'GET').toUpperCase(),\n        extraParams: refined.extraParams,\n      }\n    }\n    return null\n  },\n\n  fetch(arg, successCallback, failureCallback) {\n    let meta = arg.resourceSource.meta\n    let requestParams = buildRequestParams(meta, arg.range, arg.context)\n\n    requestJson(meta.method, meta.url, requestParams, (rawResources, xhr) => {\n      successCallback({ rawResources, xhr })\n    }, (message, xhr) => {\n      failureCallback({ message, xhr })\n    })\n  },\n\n})\n\n// TODO: somehow consolidate with event json feed\nfunction buildRequestParams(meta: JsonFeedMeta, range: DateRange | null, context: CalendarContext) {\n  let { dateEnv, options } = context\n  let startParam\n  let endParam\n  let timeZoneParam\n  let customRequestParams\n  let params = {}\n\n  if (range) {\n    startParam = meta.startParam\n    if (startParam == null) {\n      startParam = options.startParam\n    }\n\n    endParam = meta.endParam\n    if (endParam == null) {\n      endParam = options.endParam\n    }\n\n    timeZoneParam = meta.timeZoneParam\n    if (timeZoneParam == null) {\n      timeZoneParam = options.timeZoneParam\n    }\n\n    params[startParam] = dateEnv.formatIso(range.start)\n    params[endParam] = dateEnv.formatIso(range.end)\n\n    if (dateEnv.timeZone !== 'local') {\n      params[timeZoneParam] = dateEnv.timeZone\n    }\n  }\n\n  // retrieve any outbound GET/POST data from the options\n  if (typeof meta.extraParams === 'function') {\n    // supplied as a function that returns a key/value object\n    customRequestParams = meta.extraParams()\n  } else {\n    // probably supplied as a straight key/value object\n    customRequestParams = meta.extraParams || {}\n  }\n\n  __assign(params, customRequestParams)\n\n  return params\n}\n", "import {\n  createElement, Ref, ComponentChildren, ViewContextType, ViewContext, RenderHook,\n  ViewApi, formatDayString, Dictionary, MountArg,\n} from '@fullcalendar/common'\nimport { Resource } from '../structs/resource'\nimport { ResourceApi } from '../api/ResourceApi'\n\nexport interface ResourceLabelRootProps {\n  resource: Resource\n  date?: Date\n  children: (\n    rootElRef: Ref<HTMLElement>,\n    classNames: string[],\n    dataAttrs: Dictionary,\n    innerElRef: Ref<HTMLElement>,\n    innerContent: ComponentChildren\n  ) => ComponentChildren\n}\n\nexport interface ResourceLabelContentArg {\n  resource: ResourceApi\n  date?: Date\n  view: ViewApi\n}\n\nexport type ResourceLabelMountArg = MountArg<ResourceLabelContentArg>\n\n// TODO: not used for Spreadsheet. START USING. difficult because of col-specific rendering props\n\nexport function ResourceLabelRoot(props: ResourceLabelRootProps) {\n  return (\n    <ViewContextType.Consumer>\n      {(context: ViewContext) => {\n        let { options } = context\n        let hookProps: ResourceLabelContentArg = {\n          resource: new ResourceApi(context, props.resource),\n          date: props.date ? context.dateEnv.toDate(props.date) : null,\n          view: context.viewApi,\n        }\n\n        let dataAttrs = {\n          'data-resource-id': props.resource.id, // TODO: only do public-facing one?\n          'data-date': props.date ? formatDayString(props.date) : undefined,\n        }\n\n        return (\n          <RenderHook<ResourceLabelContentArg>\n            hookProps={hookProps}\n            classNames={options.resourceLabelClassNames}\n            content={options.resourceLabelContent}\n            defaultContent={renderInnerContent}\n            didMount={options.resourceLabelDidMount}\n            willUnmount={options.resourceLabelWillUnmount}\n          >\n            {(rootElRef, classNames, innerElRef, innerContent) => props.children(\n              rootElRef,\n              classNames, // TODO: pass in 'fc-resource' ?\n              dataAttrs,\n              innerElRef,\n              innerContent,\n            )}\n          </RenderHook>\n        )\n      }}\n    </ViewContextType.Consumer>\n  )\n}\n\nfunction renderInnerContent(props: ResourceLabelContentArg) {\n  return props.resource.title || props.resource.id\n}\n", "import { createElement, BaseComponent, DateMarker, Ref, ComponentChildren } from '@fullcalendar/common'\nimport { Resource } from '../structs/resource'\nimport { ResourceLabelRoot } from './ResourceLabelRoot'\n\nexport interface ResourceCellProps {\n  resource: Resource\n  colSpan: number\n  date?: DateMarker\n  isSticky?: boolean\n}\n\nexport class ResourceCell extends BaseComponent<ResourceCellProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <ResourceLabelRoot resource={props.resource} date={props.date}>\n        {(elRef: Ref<HTMLTableCellElement>, customClassNames: string[], dataAttrs, innerElRef, innerContent: ComponentChildren) => (\n          <th\n            ref={elRef}\n            role=\"columnheader\"\n            className={['fc-col-header-cell', 'fc-resource'].concat(customClassNames).join(' ')}\n            colSpan={props.colSpan}\n            {...dataAttrs}\n          >\n            <div className=\"fc-scrollgrid-sync-inner\">\n              <span\n                className={[\n                  'fc-col-header-cell-cushion',\n                  props.isSticky ? 'fc-sticky' : '',\n                ].join(' ')}\n                ref={innerElRef}\n              >\n                {innerContent}\n              </span>\n            </div>\n          </th>\n        )}\n      </ResourceLabelRoot>\n    )\n  }\n}\n", "import {\n  VNode, createElement, TableDowCell, memoize, BaseComponent,\n  DateMarker, DateFormatter, computeFallbackHeaderFormat, TableDateCell, Fragment,\n  DateRange, NowTimer, DateProfile,\n} from '@fullcalendar/common'\nimport { Resource } from '../structs/resource'\nimport { ResourceApi } from '../api/ResourceApi'\nimport { ResourceCell } from './ResourceCell'\n\nexport interface ResourceDayHeaderProps {\n  dates: DateMarker[]\n  dateProfile: DateProfile\n  datesRepDistinctDays: boolean\n  resources: Resource[] // flattened\n  renderIntro?: (rowKey: string) => VNode\n}\n\nexport class ResourceDayHeader extends BaseComponent<ResourceDayHeaderProps> { // TODO: rename to ResourceDayHeaderTrs?\n  private buildDateFormat = memoize(buildDateFormat)\n\n  render() {\n    let { props, context } = this\n    let dateFormat = this.buildDateFormat(\n      context.options.dayHeaderFormat,\n      props.datesRepDistinctDays,\n      props.dates.length,\n    )\n\n    return (\n      <NowTimer unit=\"day\">\n        {(nowDate: DateMarker, todayRange: DateRange) => {\n          if (props.dates.length === 1) {\n            return this.renderResourceRow(props.resources, props.dates[0])\n          }\n          if (context.options.datesAboveResources) {\n            return this.renderDayAndResourceRows(props.dates, dateFormat, todayRange, props.resources)\n          }\n          return this.renderResourceAndDayRows(props.resources, props.dates, dateFormat, todayRange)\n        }}\n      </NowTimer>\n    )\n  }\n\n  renderResourceRow(resources: Resource[], date: DateMarker) {\n    let resourceCells = resources.map((resource) => (\n      <ResourceCell\n        key={resource.id}\n        resource={resource}\n        colSpan={1}\n        date={date}\n      />\n    ))\n    return this.buildTr(resourceCells, 'resources')\n  }\n\n  renderDayAndResourceRows(dates: DateMarker[], dateFormat: DateFormatter, todayRange: DateRange, resources: Resource[]) {\n    let dateCells: VNode[] = []\n    let resourceCells: VNode[] = []\n\n    for (let date of dates) {\n      dateCells.push(\n        this.renderDateCell(date, dateFormat, todayRange, resources.length, null, true),\n      )\n\n      for (let resource of resources) {\n        resourceCells.push(\n          <ResourceCell\n            key={resource.id + ':' + date.toISOString()}\n            resource={resource}\n            colSpan={1}\n            date={date}\n          />,\n        )\n      }\n    }\n\n    return (\n      <Fragment>\n        {this.buildTr(dateCells, 'day')}\n        {this.buildTr(resourceCells, 'resources')}\n      </Fragment>\n    )\n  }\n\n  renderResourceAndDayRows(resources: Resource[], dates: DateMarker[], dateFormat: DateFormatter, todayRange: DateRange) {\n    let resourceCells: VNode[] = []\n    let dateCells: VNode[] = []\n\n    for (let resource of resources) {\n      resourceCells.push(\n        <ResourceCell\n          key={resource.id}\n          resource={resource}\n          colSpan={dates.length}\n          isSticky\n        />,\n      )\n\n      for (let date of dates) {\n        dateCells.push(\n          this.renderDateCell(date, dateFormat, todayRange, 1, resource),\n        )\n      }\n    }\n\n    return (\n      <Fragment>\n        {this.buildTr(resourceCells, 'resources')}\n        {this.buildTr(dateCells, 'day')}\n      </Fragment>\n    )\n  }\n\n  // a cell with date text. might have a resource associated with it\n  renderDateCell(\n    date: DateMarker,\n    dateFormat: DateFormatter,\n    todayRange: DateRange,\n    colSpan: number,\n    resource?: Resource,\n    isSticky?: boolean,\n  ) {\n    let { props } = this\n    let keyPostfix = resource ? `:${resource.id}` : ''\n    let extraHookProps = resource ? { resource: new ResourceApi(this.context, resource) } : {}\n    let extraDataAttrs = resource ? { 'data-resource-id': resource.id } : {}\n\n    return props.datesRepDistinctDays ? (\n      <TableDateCell\n        key={date.toISOString() + keyPostfix}\n        date={date}\n        dateProfile={props.dateProfile}\n        todayRange={todayRange}\n        colCnt={props.dates.length * props.resources.length}\n        dayHeaderFormat={dateFormat}\n        colSpan={colSpan}\n        isSticky={isSticky}\n        extraHookProps={extraHookProps}\n        extraDataAttrs={extraDataAttrs}\n      />\n    ) : (\n      <TableDowCell // we can't leverage the pure-componentness becausae the extra* props are new every time :(\n        key={date.getUTCDay() + keyPostfix}\n        dow={date.getUTCDay()}\n        dayHeaderFormat={dateFormat}\n        colSpan={colSpan}\n        isSticky={isSticky}\n        extraHookProps={extraHookProps}\n        extraDataAttrs={extraDataAttrs}\n      />\n    )\n  }\n\n  buildTr(cells: VNode[], key: string) {\n    let { renderIntro } = this.props\n\n    if (!cells.length) {\n      cells = [<td key={0}>&nbsp;</td>]\n    }\n\n    return (\n      <tr key={key} role=\"row\">\n        {renderIntro && renderIntro(key)}\n        {cells}\n      </tr>\n    )\n  }\n}\n\nfunction buildDateFormat(dayHeaderFormat: DateFormatter, datesRepDistinctDays, dayCnt) {\n  return dayHeaderFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt)\n}\n", "import { Resource } from '../structs/resource'\n\nexport class ResourceIndex {\n  indicesById: { [resourceId: string]: number }\n  ids: string[]\n  length: number\n\n  constructor(resources: Resource[]) {\n    let indicesById = {}\n    let ids = []\n\n    for (let i = 0; i < resources.length; i += 1) {\n      let id = resources[i].id\n\n      ids.push(id)\n      indicesById[id] = i\n    }\n\n    this.ids = ids\n    this.indicesById = indicesById\n    this.length = resources.length\n  }\n}\n", "import { CalendarContext, DayTableModel, DayTableCell } from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { Resource } from '../structs/resource'\nimport { ResourceApi } from '../api/ResourceApi'\nimport { ResourceIndex } from './ResourceIndex'\n\nexport abstract class AbstractResourceDayTableModel {\n  cells: DayTableCell[][]\n  rowCnt: number\n  colCnt: number\n  resourceIndex: ResourceIndex\n\n  constructor(\n    public dayTableModel: DayTableModel,\n    public resources: Resource[],\n    private context: CalendarContext,\n  ) {\n    this.resourceIndex = new ResourceIndex(resources)\n    this.rowCnt = dayTableModel.rowCnt\n    this.colCnt = dayTableModel.colCnt * resources.length\n    this.cells = this.buildCells()\n  }\n\n  abstract computeCol(dateI, resourceI): number\n  abstract computeColRanges(dateStartI, dateEndI, resourceI): {\n    firstCol: number,\n    lastCol: number,\n    isStart: boolean,\n    isEnd: boolean\n  }[]\n\n  buildCells(): DayTableCell[][] {\n    let { rowCnt, dayTableModel, resources } = this\n    let rows: DayTableCell[][] = []\n\n    for (let row = 0; row < rowCnt; row += 1) {\n      let rowCells: DayTableCell[] = []\n\n      for (let dateCol = 0; dateCol < dayTableModel.colCnt; dateCol += 1) {\n        for (let resourceCol = 0; resourceCol < resources.length; resourceCol += 1) {\n          let resource = resources[resourceCol]\n          let extraHookProps = { resource: new ResourceApi(this.context, resource) }\n          let extraDataAttrs = { 'data-resource-id': resource.id }\n          let extraClassNames = ['fc-resource']\n          let extraDateSpan = { resourceId: resource.id }\n          let date = dayTableModel.cells[row][dateCol].date\n\n          rowCells[\n            this.computeCol(dateCol, resourceCol)\n          ] = {\n            key: resource.id + ':' + date.toISOString(),\n            date,\n            extraHookProps,\n            extraDataAttrs,\n            extraClassNames,\n            extraDateSpan,\n          }\n        }\n      }\n\n      rows.push(rowCells)\n    }\n\n    return rows\n  }\n}\n", "import { __assign } from 'tslib'\nimport { AbstractResourceDayTableModel } from './AbstractResourceDayTableModel'\n\n/*\nresources over dates\n*/\nexport class ResourceDayTableModel extends AbstractResourceDayTableModel {\n  computeCol(dateI, resourceI) {\n    return resourceI * this.dayTableModel.colCnt + dateI\n  }\n\n  /*\n  all date ranges are intact\n  */\n  computeColRanges(dateStartI, dateEndI, resourceI) {\n    return [\n      {\n        firstCol: this.computeCol(dateStartI, resourceI),\n        lastCol: this.computeCol(dateEndI, resourceI),\n        isStart: true,\n        isEnd: true,\n      },\n    ]\n  }\n}\n", "import { __assign } from 'tslib'\nimport { AbstractResourceDayTableModel } from './AbstractResourceDayTableModel'\n\n/*\ndates over resources\n*/\nexport class DayResourceTableModel extends AbstractResourceDayTableModel {\n  computeCol(dateI, resourceI) {\n    return dateI * this.resources.length + resourceI\n  }\n\n  /*\n  every single day is broken up\n  */\n  computeColRanges(dateStartI, dateEndI, resourceI) {\n    let segs = []\n\n    for (let i = dateStartI; i <= dateEndI; i += 1) {\n      let col = this.computeCol(i, resourceI)\n\n      segs.push({\n        firstCol: col,\n        lastCol: col,\n        isStart: i === dateStartI,\n        isEnd: i === dateEndI,\n      })\n    }\n\n    return segs\n  }\n}\n", "import { SlicedProps, Seg, memoize, EventSegUiInteractionState } from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { AbstractResourceDayTableModel } from './AbstractResourceDayTableModel'\n\nconst NO_SEGS = [] // for memoizing\n\nexport abstract class VResourceJoiner<SegType extends Seg> {\n  private joinDateSelection = memoize(this.joinSegs)\n  private joinBusinessHours = memoize(this.joinSegs)\n  private joinFgEvents = memoize(this.joinSegs)\n  private joinBgEvents = memoize(this.joinSegs)\n  private joinEventDrags = memoize(this.joinInteractions)\n  private joinEventResizes = memoize(this.joinInteractions)\n\n  /*\n  propSets also has a '' key for things with no resource\n  */\n  joinProps(\n    propSets: { [resourceId: string]: SlicedProps<SegType> },\n    resourceDayTable: AbstractResourceDayTableModel,\n  ): SlicedProps<SegType> {\n    let dateSelectionSets = []\n    let businessHoursSets = []\n    let fgEventSets = []\n    let bgEventSets = []\n    let eventDrags = []\n    let eventResizes = []\n    let eventSelection = ''\n    let keys = resourceDayTable.resourceIndex.ids.concat(['']) // add in the all-resource key\n\n    for (let key of keys) {\n      let props = propSets[key]\n\n      dateSelectionSets.push(props.dateSelectionSegs)\n      businessHoursSets.push(key ? props.businessHourSegs : NO_SEGS) // don't include redundant all-resource businesshours\n      fgEventSets.push(key ? props.fgEventSegs : NO_SEGS) // don't include fg all-resource segs\n      bgEventSets.push(props.bgEventSegs)\n      eventDrags.push(props.eventDrag)\n      eventResizes.push(props.eventResize)\n      eventSelection = eventSelection || props.eventSelection\n    }\n\n    return {\n      dateSelectionSegs: this.joinDateSelection(resourceDayTable, ...dateSelectionSets),\n      businessHourSegs: this.joinBusinessHours(resourceDayTable, ...businessHoursSets),\n      fgEventSegs: this.joinFgEvents(resourceDayTable, ...fgEventSets),\n      bgEventSegs: this.joinBgEvents(resourceDayTable, ...bgEventSets),\n      eventDrag: this.joinEventDrags(resourceDayTable, ...eventDrags),\n      eventResize: this.joinEventResizes(resourceDayTable, ...eventResizes),\n      eventSelection,\n    }\n  }\n\n  joinSegs(resourceDayTable: AbstractResourceDayTableModel, ...segGroups: SegType[][]): SegType[] {\n    let resourceCnt = resourceDayTable.resources.length\n    let transformedSegs = []\n\n    for (let i = 0; i < resourceCnt; i += 1) {\n      for (let seg of segGroups[i]) {\n        transformedSegs.push(\n          ...this.transformSeg(seg, resourceDayTable, i),\n        )\n      }\n\n      for (let seg of segGroups[resourceCnt]) { // one beyond. the all-resource\n        transformedSegs.push(\n          ...this.transformSeg(seg, resourceDayTable, i),\n        )\n      }\n    }\n\n    return transformedSegs\n  }\n\n  /*\n  for expanding non-resource segs to all resources.\n  only for public use.\n  no memoizing.\n  */\n  expandSegs(resourceDayTable: AbstractResourceDayTableModel, segs: SegType[]) {\n    let resourceCnt = resourceDayTable.resources.length\n    let transformedSegs = []\n\n    for (let i = 0; i < resourceCnt; i += 1) {\n      for (let seg of segs) {\n        transformedSegs.push(\n          ...this.transformSeg(seg, resourceDayTable, i),\n        )\n      }\n    }\n\n    return transformedSegs\n  }\n\n  joinInteractions(\n    resourceDayTable: AbstractResourceDayTableModel,\n    ...interactions: EventSegUiInteractionState[]\n  ): EventSegUiInteractionState | null {\n    let resourceCnt = resourceDayTable.resources.length\n    let affectedInstances = {}\n    let transformedSegs = []\n    let anyInteractions = false\n    let isEvent = false\n\n    for (let i = 0; i < resourceCnt; i += 1) {\n      let interaction = interactions[i]\n\n      if (interaction) {\n        anyInteractions = true\n\n        for (let seg of interaction.segs) {\n          transformedSegs.push(\n            ...this.transformSeg(seg as SegType, resourceDayTable, i), // TODO: templateify Interaction::segs\n          )\n        }\n\n        __assign(affectedInstances, interaction.affectedInstances)\n        isEvent = isEvent || interaction.isEvent\n      }\n\n      if (interactions[resourceCnt]) { // one beyond. the all-resource\n        for (let seg of interactions[resourceCnt].segs) {\n          transformedSegs.push(\n            ...this.transformSeg(seg as SegType, resourceDayTable, i), // TODO: templateify Interaction::segs\n          )\n        }\n      }\n    }\n\n    if (anyInteractions) {\n      return {\n        affectedInstances,\n        segs: transformedSegs,\n        isEvent,\n      }\n    }\n\n    return null\n  }\n\n  // needs to generate NEW seg obj!!! because of .el\n  abstract transformSeg(seg: SegType, resourceDayTable: AbstractResourceDayTableModel, resourceI: number): SegType[]\n}\n", "import { EventDef, mapHash, Splitter, SplittableProps, DateSpan } from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { AbstractResourceDayTableModel } from './AbstractResourceDayTableModel'\n\n// splitter\n\nexport interface VResourceProps extends SplittableProps {\n  resourceDayTableModel: AbstractResourceDayTableModel\n}\n\n/*\nTODO: just use ResourceHash somehow? could then use the generic ResourceSplitter\n*/\nexport class VResourceSplitter extends Splitter<VResourceProps> {\n  getKeyInfo(props: VResourceProps) {\n    let { resourceDayTableModel } = props\n\n    let hash = mapHash(\n      resourceDayTableModel.resourceIndex.indicesById,\n      (i) => resourceDayTableModel.resources[i], // has `ui` AND `businessHours` keys!\n    ) as any // :(\n\n    hash[''] = {}\n\n    return hash\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    return [dateSpan.resourceId || '']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    let resourceIds = eventDef.resourceIds\n\n    if (!resourceIds.length) {\n      return ['']\n    }\n\n    return resourceIds\n  }\n}\n", "import { flexibleCompare, compareByFieldSpecs, OrderSpec } from '@fullcalendar/common'\nimport { ResourceHash, Resource } from '../structs/resource'\nimport { ResourceEntityExpansions } from '../reducers/resourceEntityExpansions'\nimport { GroupSpec } from './resource-spec'\nimport { ResourceApi } from '../api/ResourceApi'\n\ninterface ParentNode {\n  children: ParentNode[]\n}\n\ninterface ResourceParentNode extends ParentNode {\n  resource: Resource\n  resourceFields: any\n}\n\ntype ResourceNodeHash = { [resourceId: string]: ResourceParentNode }\n\ninterface GroupParentNode extends ParentNode {\n  group: Group\n}\n\nexport interface Group {\n  value: any\n  spec: GroupSpec\n}\n\nexport interface GroupNode {\n  id: string // 'field:value'\n  isExpanded: boolean\n  group: Group\n}\n\nexport interface ResourceNode {\n  id: string // 'resourceId' (won't collide with group ID's because has colon)\n  rowSpans: number[]\n  depth: number\n  isExpanded: boolean\n  hasChildren: boolean\n  resource: Resource\n  resourceFields: any\n}\n\n/*\ndoesn't accept grouping\n*/\nexport function flattenResources(resourceStore: ResourceHash, orderSpecs: OrderSpec<ResourceApi>[]): Resource[] {\n  return buildRowNodes(resourceStore, [], orderSpecs, false, {}, true)\n    .map((node) => (node as ResourceNode).resource)\n}\n\nexport function buildRowNodes(\n  resourceStore: ResourceHash,\n  groupSpecs: GroupSpec[],\n  orderSpecs: OrderSpec<ResourceApi>[],\n  isVGrouping: boolean,\n  expansions: ResourceEntityExpansions,\n  expansionDefault: boolean,\n): (GroupNode | ResourceNode)[] {\n  let complexNodes = buildHierarchy(resourceStore, isVGrouping ? -1 : 1, groupSpecs, orderSpecs)\n  let flatNodes = []\n\n  flattenNodes(complexNodes, flatNodes, isVGrouping, [], 0, expansions, expansionDefault)\n\n  return flatNodes\n}\n\nfunction flattenNodes(\n  complexNodes: ParentNode[],\n  res, isVGrouping, rowSpans, depth,\n  expansions: ResourceEntityExpansions,\n  expansionDefault: boolean,\n) {\n  for (let i = 0; i < complexNodes.length; i += 1) {\n    let complexNode = complexNodes[i]\n    let group = (complexNode as GroupParentNode).group\n\n    if (group) {\n      if (isVGrouping) {\n        let firstRowIndex = res.length\n        let rowSpanIndex = rowSpans.length\n\n        flattenNodes(complexNode.children, res, isVGrouping, rowSpans.concat(0), depth, expansions, expansionDefault)\n\n        if (firstRowIndex < res.length) {\n          let firstRow = res[firstRowIndex]\n          let firstRowSpans = firstRow.rowSpans = firstRow.rowSpans.slice()\n\n          firstRowSpans[rowSpanIndex] = res.length - firstRowIndex\n        }\n      } else {\n        let id = group.spec.field + ':' + group.value\n        let isExpanded = expansions[id] != null ? expansions[id] : expansionDefault\n\n        res.push({ id, group, isExpanded })\n\n        if (isExpanded) {\n          flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault)\n        }\n      }\n    } else if ((complexNode as ResourceParentNode).resource) {\n      let id = (complexNode as ResourceParentNode).resource.id\n      let isExpanded = expansions[id] != null ? expansions[id] : expansionDefault\n\n      res.push({\n        id,\n        rowSpans,\n        depth,\n        isExpanded,\n        hasChildren: Boolean(complexNode.children.length),\n        resource: (complexNode as ResourceParentNode).resource,\n        resourceFields: (complexNode as ResourceParentNode).resourceFields,\n      })\n\n      if (isExpanded) {\n        flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault)\n      }\n    }\n  }\n}\n\nfunction buildHierarchy(\n  resourceStore: ResourceHash,\n  maxDepth: number,\n  groupSpecs: GroupSpec[],\n  orderSpecs: OrderSpec<ResourceApi>[],\n): ParentNode[] {\n  let resourceNodes = buildResourceNodes(resourceStore, orderSpecs)\n  let builtNodes: ParentNode[] = []\n\n  for (let resourceId in resourceNodes) {\n    let resourceNode = resourceNodes[resourceId]\n\n    if (!resourceNode.resource.parentId) {\n      insertResourceNode(resourceNode, builtNodes, groupSpecs, 0, maxDepth, orderSpecs)\n    }\n  }\n\n  return builtNodes\n}\n\nfunction buildResourceNodes(resourceStore: ResourceHash, orderSpecs: OrderSpec<ResourceApi>[]): ResourceNodeHash {\n  let nodeHash: ResourceNodeHash = {}\n\n  for (let resourceId in resourceStore) {\n    let resource = resourceStore[resourceId]\n\n    nodeHash[resourceId] = {\n      resource,\n      resourceFields: buildResourceFields(resource),\n      children: [],\n    }\n  }\n\n  for (let resourceId in resourceStore) {\n    let resource = resourceStore[resourceId]\n\n    if (resource.parentId) {\n      let parentNode = nodeHash[resource.parentId]\n\n      if (parentNode) {\n        insertResourceNodeInSiblings(nodeHash[resourceId], parentNode.children, orderSpecs)\n      }\n    }\n  }\n\n  return nodeHash\n}\n\nfunction insertResourceNode(\n  resourceNode: ResourceParentNode,\n  nodes: ParentNode[],\n  groupSpecs: GroupSpec[],\n  depth: number,\n  maxDepth: number,\n  orderSpecs: OrderSpec<ResourceApi>[],\n) {\n  if (groupSpecs.length && (maxDepth === -1 || depth <= maxDepth)) {\n    let groupNode = ensureGroupNodes(resourceNode, nodes, groupSpecs[0])\n\n    insertResourceNode(resourceNode, groupNode.children, groupSpecs.slice(1), depth + 1, maxDepth, orderSpecs)\n  } else {\n    insertResourceNodeInSiblings(resourceNode, nodes, orderSpecs)\n  }\n}\n\nfunction ensureGroupNodes(resourceNode: ResourceParentNode, nodes: ParentNode[], groupSpec: GroupSpec): GroupParentNode {\n  let groupValue = resourceNode.resourceFields[groupSpec.field]\n  let groupNode\n  let newGroupIndex\n\n  // find an existing group that matches, or determine the position for a new group\n  if (groupSpec.order) {\n    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex += 1) {\n      let node = nodes[newGroupIndex]\n\n      if ((node as GroupParentNode).group) {\n        let cmp = flexibleCompare(groupValue, (node as GroupParentNode).group.value) * groupSpec.order\n\n        if (cmp === 0) {\n          groupNode = node\n          break\n        } else if (cmp < 0) {\n          break\n        }\n      }\n    }\n  } else { // the groups are unordered\n    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex += 1) {\n      let node = nodes[newGroupIndex]\n\n      if ((node as GroupParentNode).group && groupValue === (node as GroupParentNode).group.value) {\n        groupNode = node\n        break\n      }\n    }\n  }\n\n  if (!groupNode) {\n    groupNode = {\n      group: {\n        value: groupValue,\n        spec: groupSpec,\n      },\n      children: [],\n    }\n\n    nodes.splice(newGroupIndex, 0, groupNode)\n  }\n\n  return groupNode\n}\n\nfunction insertResourceNodeInSiblings(resourceNode, siblings, orderSpecs: OrderSpec<ResourceApi>[]) {\n  let i\n\n  for (i = 0; i < siblings.length; i += 1) {\n    let cmp = compareByFieldSpecs(siblings[i].resourceFields, resourceNode.resourceFields, orderSpecs) // TODO: pass in ResourceApi?\n\n    if (cmp > 0) { // went 1 past. insert at i\n      break\n    }\n  }\n\n  siblings.splice(i, 0, resourceNode)\n}\n\nexport function buildResourceFields(resource: Resource) {\n  let obj = { ...resource.extendedProps, ...resource.ui, ...resource }\n\n  delete obj.ui\n  delete obj.extendedProps\n\n  return obj\n}\n\nexport function isGroupsEqual(group0: Group, group1: Group) {\n  return group0.spec === group1.spec && group0.value === group1.value\n}\n", "import { createPlugin } from '@fullcalendar/common'\n\nimport premiumCommonPlugin from '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n// ensure ambient declarations\nimport '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n\nimport './ambient'\nimport { ResourceDataAdder, transformIsDraggable } from './View' // TODO: ResourceDataAdder should be own plugin\nimport { ResourceEventConfigAdder } from './ResourceEventConfigAdder'\nimport { reduceResources, ResourceState } from './reducers/resources'\nimport { generateEventDefResourceMembers, EVENT_REFINERS } from './structs/event-parse'\nimport './structs/event-declare'\nimport { massageEventDragMutation, applyEventDefMutation, transformEventDrop } from './EventDragging'\nimport { transformDateSelectionJoin } from './DateSelecting'\nimport { transformDatePoint, transformDateSpan } from './api/CalendarApi-extend'\nimport './api/CalendarApi-declare'\nimport { isPropsValidWithResources } from './validation'\nimport { transformExternalDef } from './ExternalElementDragging'\nimport './api/EventApi-extend'\nimport './api/EventApi-declare'\nimport { optionChangeHandlers } from './option-change-handlers'\nimport { handleResourceStore } from './resources-crud'\nimport { OPTION_REFINERS, LISTENER_REFINERS } from './options'\nimport './options-declare'\n\n// TODO: plugin-ify\nimport './resource-sources/resource-array'\nimport './resource-sources/resource-func'\nimport './resource-sources/resource-json-feed'\n\nexport { ResourceLaneContentArg, ResourceLaneHookPropsInput } from './render-hooks'\n\nexport * from './api-type-deps'\nexport { DEFAULT_RESOURCE_ORDER } from './resources-crud'\n\nexport default createPlugin({\n  deps: [\n    premiumCommonPlugin,\n  ],\n  reducers: [\n    reduceResources,\n  ],\n  isLoadingFuncs: [\n    (state: ResourceState) => state.resourceSource && state.resourceSource.isFetching,\n  ],\n  eventRefiners: EVENT_REFINERS,\n  eventDefMemberAdders: [generateEventDefResourceMembers],\n  isDraggableTransformers: [transformIsDraggable],\n  eventDragMutationMassagers: [massageEventDragMutation],\n  eventDefMutationAppliers: [applyEventDefMutation],\n  dateSelectionTransformers: [transformDateSelectionJoin],\n  datePointTransforms: [transformDatePoint],\n  dateSpanTransforms: [transformDateSpan],\n  viewPropsTransformers: [ResourceDataAdder, ResourceEventConfigAdder],\n  isPropsValid: isPropsValidWithResources,\n  externalDefTransforms: [transformExternalDef],\n  eventDropTransformers: [transformEventDrop],\n  optionChangeHandlers,\n  optionRefiners: OPTION_REFINERS,\n  listenerRefiners: LISTENER_REFINERS,\n  propSetHandlers: { resourceStore: handleResourceStore },\n})\n\nexport { ResourceDayHeader } from './common/ResourceDayHeader'\nexport { AbstractResourceDayTableModel } from './common/AbstractResourceDayTableModel'\nexport { ResourceDayTableModel } from './common/ResourceDayTableModel'\nexport { DayResourceTableModel } from './common/DayResourceTableModel'\nexport { VResourceJoiner } from './common/VResourceJoiner'\nexport { VResourceSplitter } from './common/VResourceSplitter'\nexport { Resource, ResourceHash, getPublicId } from './structs/resource'\nexport { ResourceViewProps } from './View'\nexport {\n  flattenResources,\n  Group,\n  isGroupsEqual,\n  GroupNode,\n  ResourceNode,\n  buildRowNodes,\n  buildResourceFields,\n} from './common/resource-hierarchy'\nexport {\n  ColSpec,\n  GroupSpec,\n  GroupLaneRenderHooks,\n  ColCellContentArg,\n  ColCellMountArg,\n  ColHeaderContentArg,\n  ColHeaderMountArg,\n  ColHeaderRenderHooks,\n} from './common/resource-spec'\nexport { ResourceApi } from './api/ResourceApi'\nexport { ResourceSplitter } from './common/ResourceSplitter'\nexport { ResourceLabelRoot, ResourceLabelRootProps } from './common/ResourceLabelRoot'\n", "import { config, isValidDate, addDays, createElement, CalendarContext, Fragment } from '@fullcalendar/common'\n\nconst RELEASE_DATE = '<%= releaseDate %>' // for Scheduler\nconst UPGRADE_WINDOW = 365 + 7 // days. 1 week leeway, for tz shift reasons too\nconst INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid'\nconst OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated'\nconst PRESET_LICENSE_KEYS = [\n  'GPL-My-Project-Is-Open-Source',\n  'CC-Attribution-NonCommercial-NoDerivatives',\n]\nconst CSS = {\n  position: 'absolute' as 'absolute', // for TS+React. ugh.\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px',\n}\n\nexport function buildLicenseWarning(context: CalendarContext) {\n  let key = context.options.schedulerLicenseKey\n  let currentUrl = typeof window !== 'undefined' ? window.location.href : ''\n\n  if (!isImmuneUrl(currentUrl)) {\n    let status = processLicenseKey(key)\n\n    if (status !== 'valid') {\n      return (\n        <div className=\"fc-license-message\" style={CSS}>\n          {(status === 'outdated') ? (\n            <Fragment>\n              {'Your license key is too old to work with this version. '}\n              <a href={OUTDATED_LICENSE_URL}>More Info</a>\n            </Fragment>\n          ) : (\n            <Fragment>\n              {'Your license key is invalid. '}\n              <a href={INVALID_LICENSE_URL}>More Info</a>\n            </Fragment>\n          )}\n        </div>\n      )\n    }\n  }\n\n  return null\n}\n\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid'\n  }\n\n  const parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/)\n\n  if (parts && (parts[1].length === 10)) {\n    const purchaseDate = new Date(parseInt(parts[2], 10) * 1000)\n    const releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE)\n\n    if (isValidDate(releaseDate)) { // token won't be replaced in dev mode\n      const minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW)\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid'\n      }\n\n      return 'outdated'\n    }\n  }\n\n  return 'invalid'\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url)\n}\n", "export const OPTION_REFINERS = {\n  schedulerLicenseKey: String,\n}\n", "import { createPlugin } from '@fullcalendar/common'\nimport { buildLicenseWarning } from './license'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning],\n})\n", "import { TableSeg } from '@fullcalendar/daygrid'\nimport { AbstractResourceDayTableModel, VResourceJoiner } from '@fullcalendar/resource-common'\n\nexport class ResourceDayTableJoiner extends VResourceJoiner<TableSeg> {\n  transformSeg(seg: TableSeg, resourceDayTableModel: AbstractResourceDayTableModel, resourceI: number): TableSeg[] {\n    let colRanges = resourceDayTableModel.computeColRanges(seg.firstCol, seg.lastCol, resourceI)\n\n    return colRanges.map((colRange) => ({\n      ...seg,\n      ...colRange,\n      isStart: seg.isStart && colRange.isStart,\n      isEnd: seg.isEnd && colRange.isEnd,\n    }))\n  }\n}\n", "import {\n  createElement, createRef, VNode,\n  mapHash, Hit, DateSpan, DateComponent, EventStore, EventUiHash, EventInteractionState, Duration, RefObject, CssDimValue, DateProfile,\n} from '@fullcalendar/common'\nimport { DayTableSlicer, Table } from '@fullcalendar/daygrid'\nimport { AbstractResourceDayTableModel, VResourceSplitter } from '@fullcalendar/resource-common'\nimport { ResourceDayTableJoiner } from './ResourceDayTableJoiner'\n\nexport interface ResourceDayTableProps {\n  dateProfile: DateProfile\n  resourceDayTableModel: AbstractResourceDayTableModel\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  nextDayThreshold: Duration\n  tableMinWidth: CssDimValue\n  colGroupNode: VNode\n  renderRowIntro?: () => VNode\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  expandRows: boolean\n  showWeekNumbers: boolean\n  headerAlignElRef?: RefObject<HTMLElement> // for more popover alignment\n  clientWidth: number | null\n  clientHeight: number | null\n  forPrint: boolean\n}\n\nexport class ResourceDayTable extends DateComponent<ResourceDayTableProps> {\n  private splitter = new VResourceSplitter()\n  private slicers: { [resourceId: string]: DayTableSlicer } = {}\n  private joiner = new ResourceDayTableJoiner()\n  private tableRef = createRef<Table>()\n\n  render() {\n    let { props, context } = this\n    let { resourceDayTableModel, nextDayThreshold, dateProfile } = props\n\n    let splitProps = this.splitter.splitProps(props)\n    this.slicers = mapHash(splitProps, (split, resourceId) => this.slicers[resourceId] || new DayTableSlicer())\n    let slicedProps = mapHash(this.slicers, (slicer, resourceId) => slicer.sliceProps(\n      splitProps[resourceId],\n      dateProfile,\n      nextDayThreshold,\n      context,\n      resourceDayTableModel.dayTableModel,\n    ))\n\n    return (\n      <Table\n        forPrint={props.forPrint}\n        ref={this.tableRef}\n        {...this.joiner.joinProps(slicedProps, resourceDayTableModel)}\n        cells={resourceDayTableModel.cells}\n        dateProfile={dateProfile}\n        colGroupNode={props.colGroupNode}\n        tableMinWidth={props.tableMinWidth}\n        renderRowIntro={props.renderRowIntro}\n        dayMaxEvents={props.dayMaxEvents}\n        dayMaxEventRows={props.dayMaxEventRows}\n        showWeekNumbers={props.showWeekNumbers}\n        expandRows={props.expandRows}\n        headerAlignElRef={props.headerAlignElRef}\n        clientWidth={props.clientWidth}\n        clientHeight={props.clientHeight}\n        isHitComboAllowed={this.isHitComboAllowed}\n      />\n    )\n  }\n\n  isHitComboAllowed = (hit0: Hit, hit1: Hit) => {\n    let allowAcrossResources = this.props.resourceDayTableModel.dayTableModel.colCnt === 1\n    return allowAcrossResources || hit0.dateSpan.resourceId === hit1.dateSpan.resourceId\n  }\n}\n", "import {\n  createElement,\n  createRef,\n  DateProfileGenerator,\n  memoize,\n  DateProfile,\n  ChunkContentCallbackArgs,\n  CalendarContext,\n} from '@fullcalendar/common'\nimport { TableView, buildDayTableModel } from '@fullcalendar/daygrid'\nimport {\n  ResourceDayHeader, ResourceDayTableModel, DayResourceTableModel, ResourceViewProps,\n  Resource, flattenResources, DEFAULT_RESOURCE_ORDER,\n} from '@fullcalendar/resource-common'\nimport { ResourceDayTable } from './ResourceDayTable'\n\nexport class ResourceDayTableView extends TableView {\n  props: ResourceViewProps\n\n  private flattenResources = memoize(flattenResources)\n  private buildResourceDayTableModel = memoize(buildResourceDayTableModel)\n  private headerRef = createRef<ResourceDayHeader>()\n  private tableRef = createRef<ResourceDayTable>()\n\n  render() {\n    let { props, context } = this\n    let { options } = context\n\n    let resourceOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER\n    let resources = this.flattenResources(props.resourceStore, resourceOrderSpecs)\n    let resourceDayTableModel = this.buildResourceDayTableModel(\n      props.dateProfile,\n      context.dateProfileGenerator,\n      resources,\n      options.datesAboveResources,\n      context,\n    )\n\n    let headerContent = options.dayHeaders && (\n      <ResourceDayHeader\n        ref={this.headerRef}\n        resources={resources}\n        dateProfile={props.dateProfile}\n        dates={resourceDayTableModel.dayTableModel.headerDates}\n        datesRepDistinctDays\n      />\n    )\n\n    let bodyContent = (contentArg: ChunkContentCallbackArgs) => (\n      <ResourceDayTable\n        ref={this.tableRef}\n        dateProfile={props.dateProfile}\n        resourceDayTableModel={resourceDayTableModel}\n        businessHours={props.businessHours}\n        eventStore={props.eventStore}\n        eventUiBases={props.eventUiBases}\n        dateSelection={props.dateSelection}\n        eventSelection={props.eventSelection}\n        eventDrag={props.eventDrag}\n        eventResize={props.eventResize}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        dayMaxEvents={options.dayMaxEvents}\n        dayMaxEventRows={options.dayMaxEventRows}\n        showWeekNumbers={options.weekNumbers}\n        expandRows={!props.isHeightAuto}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n\n    return options.dayMinWidth\n      ? this.renderHScrollLayout(headerContent, bodyContent, resourceDayTableModel.colCnt, options.dayMinWidth)\n      : this.renderSimpleLayout(headerContent, bodyContent)\n  }\n}\n\nfunction buildResourceDayTableModel(\n  dateProfile: DateProfile,\n  dateProfileGenerator: DateProfileGenerator,\n  resources: Resource[],\n  datesAboveResources: boolean,\n  context: CalendarContext,\n) {\n  let dayTable = buildDayTableModel(dateProfile, dateProfileGenerator)\n\n  return datesAboveResources ?\n    new DayResourceTableModel(dayTable, resources, context) :\n    new ResourceDayTableModel(dayTable, resources, context)\n}\n", "import { createPlugin } from '@fullcalendar/common'\n\nimport premiumCommonPlugin from '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n// ensure ambient declarations\nimport '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n\nimport resourceCommonPlugin from '@fullcalendar/resource-common'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport { ResourceDayTableView } from './ResourceDayTableView'\n\nexport { ResourceDayTableView }\nexport { ResourceDayTable } from './ResourceDayTable'\n\nexport default createPlugin({\n  deps: [\n    premiumCommonPlugin,\n    resourceCommonPlugin,\n    dayGridPlugin,\n  ],\n  initialView: 'resourceDayGridDay',\n  views: {\n\n    resourceDayGrid: {\n      type: 'dayGrid', // will inherit this configuration\n      component: ResourceDayTableView,\n      needsResourceData: true,\n    },\n\n    resourceDayGridDay: {\n      type: 'resourceDayGrid',\n      duration: { days: 1 },\n    },\n\n    resourceDayGridWeek: {\n      type: 'resourceDayGrid',\n      duration: { weeks: 1 },\n    },\n\n    resourceDayGridMonth: {\n      type: 'resourceDayGrid',\n      duration: { months: 1 },\n\n      // TODO: wish we didn't have to C&P from dayGrid's file\n      monthMode: true, // a hidden option!?\n      fixedWeekCount: true,\n    },\n\n  },\n})\n", "import { TimeColsSeg } from '@fullcalendar/timegrid'\nimport { AbstractResourceDayTableModel, VResourceJoiner } from '@fullcalendar/resource-common'\n\nexport class ResourceDayTimeColsJoiner extends VResourceJoiner<TimeColsSeg> {\n  transformSeg(seg: TimeColsSeg, resourceDayTable: AbstractResourceDayTableModel, resourceI: number) {\n    return [\n      {\n        ...seg,\n        col: resourceDayTable.computeCol(seg.col, resourceI),\n      },\n    ]\n  }\n}\n", "import {\n  createElement, createRef, VNode,\n  mapHash, DateSpan, DateComponent, EventStore, EventUiHash, EventInteractionState, memoize, DateRange,\n  DateMarker, Hit, CssDimValue, NowTimer, Duration, DateProfile,\n} from '@fullcalendar/common'\nimport { DayTimeColsSlicer, TimeCols, buildDayRanges, TimeSlatMeta, TimeColsSlatsCoords } from '@fullcalendar/timegrid'\nimport { AbstractResourceDayTableModel, VResourceSplitter } from '@fullcalendar/resource-common'\nimport { ResourceDayTimeColsJoiner } from './ResourceDayTimeColsJoiner'\n\nexport interface ResourceDayTimeColsProps {\n  dateProfile: DateProfile\n  resourceDayTableModel: AbstractResourceDayTableModel\n  axis: boolean\n  slotDuration: Duration\n  slatMetas: TimeSlatMeta[]\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\nexport class ResourceDayTimeCols extends DateComponent<ResourceDayTimeColsProps> {\n  private buildDayRanges = memoize(buildDayRanges)\n  private dayRanges: DateRange[] // for now indicator\n  private splitter = new VResourceSplitter()\n  private slicers: { [resourceId: string]: DayTimeColsSlicer } = {}\n  private joiner = new ResourceDayTimeColsJoiner()\n  private timeColsRef = createRef<TimeCols>()\n\n  render() {\n    let { props, context } = this\n    let { dateEnv, options } = context\n    let { dateProfile, resourceDayTableModel } = props\n\n    let dayRanges = this.dayRanges = this.buildDayRanges(resourceDayTableModel.dayTableModel, dateProfile, dateEnv)\n    let splitProps = this.splitter.splitProps(props)\n\n    this.slicers = mapHash(splitProps, (split, resourceId) => this.slicers[resourceId] || new DayTimeColsSlicer())\n    let slicedProps = mapHash(this.slicers, (slicer, resourceId) => slicer.sliceProps(\n      splitProps[resourceId],\n      dateProfile,\n      null,\n      context,\n      dayRanges,\n    ))\n\n    return ( // TODO: would move this further down hierarchy, but sliceNowDate needs it\n      <NowTimer unit={options.nowIndicator ? 'minute' : 'day'}>\n        {(nowDate: DateMarker, todayRange: DateRange) => (\n          <TimeCols\n            ref={this.timeColsRef}\n            {...this.joiner.joinProps(slicedProps, resourceDayTableModel)}\n            dateProfile={dateProfile}\n            axis={props.axis}\n            slotDuration={props.slotDuration}\n            slatMetas={props.slatMetas}\n            cells={resourceDayTableModel.cells[0]}\n            tableColGroupNode={props.tableColGroupNode}\n            tableMinWidth={props.tableMinWidth}\n            clientWidth={props.clientWidth}\n            clientHeight={props.clientHeight}\n            expandRows={props.expandRows}\n            nowDate={nowDate}\n            nowIndicatorSegs={options.nowIndicator && this.buildNowIndicatorSegs(nowDate)}\n            todayRange={todayRange}\n            onScrollTopRequest={props.onScrollTopRequest}\n            forPrint={props.forPrint}\n            onSlatCoords={props.onSlatCoords}\n            isHitComboAllowed={this.isHitComboAllowed}\n          />\n        )}\n      </NowTimer>\n    )\n  }\n\n  isHitComboAllowed = (hit0: Hit, hit1: Hit) => {\n    let allowAcrossResources = this.dayRanges.length === 1\n    return allowAcrossResources || hit0.dateSpan.resourceId === hit1.dateSpan.resourceId\n  }\n\n  buildNowIndicatorSegs(date: DateMarker) {\n    let nonResourceSegs = this.slicers[''].sliceNowDate(date, this.context, this.dayRanges)\n    return this.joiner.expandSegs(this.props.resourceDayTableModel, nonResourceSegs)\n  }\n}\n", "import { createElement, DateProfileGenerator, memoize, DateProfile, ChunkContentCallbackArgs, CalendarContext } from '@fullcalendar/common'\nimport { TimeColsView, buildTimeColsModel, buildSlatMetas } from '@fullcalendar/timegrid'\nimport {\n  ResourceDayHeader, ResourceDayTableModel, DayResourceTableModel, ResourceViewProps,\n  Resource, flattenResources, DEFAULT_RESOURCE_ORDER,\n} from '@fullcalendar/resource-common'\nimport { ResourceDayTable } from '@fullcalendar/resource-daygrid'\nimport { ResourceDayTimeCols } from './ResourceDayTimeCols'\n\nexport class ResourceDayTimeColsView extends TimeColsView {\n  props: ResourceViewProps\n\n  private flattenResources = memoize(flattenResources)\n  private buildResourceTimeColsModel = memoize(buildResourceTimeColsModel)\n  private buildSlatMetas = memoize(buildSlatMetas)\n\n  render() {\n    let { props, context } = this\n    let { options, dateEnv } = context\n    let { dateProfile } = props\n\n    let splitProps = this.allDaySplitter.splitProps(props)\n    let resourceOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER\n    let resources = this.flattenResources(props.resourceStore, resourceOrderSpecs)\n    let resourceDayTableModel = this.buildResourceTimeColsModel(\n      dateProfile,\n      context.dateProfileGenerator,\n      resources,\n      options.datesAboveResources,\n      context,\n    )\n\n    let slatMetas = this.buildSlatMetas(\n      dateProfile.slotMinTime,\n      dateProfile.slotMaxTime,\n      options.slotLabelInterval,\n      options.slotDuration,\n      dateEnv,\n    )\n    let { dayMinWidth } = options\n    let hasAttachedAxis = !dayMinWidth\n    let hasDetachedAxis = dayMinWidth\n\n    let headerContent = options.dayHeaders && (\n      <ResourceDayHeader\n        resources={resources}\n        dates={resourceDayTableModel.dayTableModel.headerDates}\n        dateProfile={dateProfile}\n        datesRepDistinctDays\n        renderIntro={hasAttachedAxis ? this.renderHeadAxis : null}\n      />\n    )\n\n    let allDayContent = (options.allDaySlot !== false) && ((contentArg: ChunkContentCallbackArgs) => (\n      <ResourceDayTable\n        {...splitProps.allDay}\n        dateProfile={dateProfile}\n        resourceDayTableModel={resourceDayTableModel}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        renderRowIntro={hasAttachedAxis ? this.renderTableRowAxis : null}\n        showWeekNumbers={false}\n        expandRows={false}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n        {...this.getAllDayMaxEventProps()}\n      />\n    ))\n\n    let timeGridContent = (contentArg: ChunkContentCallbackArgs) => (\n      <ResourceDayTimeCols\n        {...splitProps.timed}\n        dateProfile={dateProfile}\n        axis={hasAttachedAxis}\n        slotDuration={options.slotDuration}\n        slatMetas={slatMetas}\n        resourceDayTableModel={resourceDayTableModel}\n        tableColGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        onSlatCoords={this.handleSlatCoords}\n        expandRows={contentArg.expandRows}\n        forPrint={props.forPrint}\n        onScrollTopRequest={this.handleScrollTopRequest}\n      />\n    )\n\n    return hasDetachedAxis\n      ? this.renderHScrollLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n        resourceDayTableModel.colCnt,\n        dayMinWidth,\n        slatMetas,\n        this.state.slatCoords,\n      )\n      : this.renderSimpleLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n      )\n  }\n}\n\nfunction buildResourceTimeColsModel(\n  dateProfile: DateProfile,\n  dateProfileGenerator: DateProfileGenerator,\n  resources: Resource[],\n  datesAboveResources: boolean,\n  context: CalendarContext,\n) {\n  let dayTable = buildTimeColsModel(dateProfile, dateProfileGenerator)\n\n  return datesAboveResources ?\n    new DayResourceTableModel(dayTable, resources, context) :\n    new ResourceDayTableModel(dayTable, resources, context)\n}\n", "import { createPlugin } from '@fullcalendar/common'\n\nimport premiumCommonPlugin from '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n// ensure ambient declarations\nimport '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n\nimport resourceCommonPlugin from '@fullcalendar/resource-common'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport { ResourceDayTimeColsView } from './ResourceDayTimeColsView'\n\nexport { ResourceDayTimeColsView }\nexport { ResourceDayTimeCols } from './ResourceDayTimeCols'\n\nexport default createPlugin({\n  deps: [\n    premiumCommonPlugin,\n    resourceCommonPlugin,\n    timeGridPlugin,\n  ],\n  initialView: 'resourceTimeGridDay',\n  views: {\n\n    resourceTimeGrid: {\n      type: 'timeGrid', // will inherit this configuration\n      component: ResourceDayTimeColsView,\n      needsResourceData: true,\n    },\n\n    resourceTimeGridDay: {\n      type: 'resourceTimeGrid',\n      duration: { days: 1 },\n    },\n\n    resourceTimeGridWeek: {\n      type: 'resourceTimeGrid',\n      duration: { weeks: 1 },\n    },\n\n  },\n})\n"],
  "mappings": "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",
  "names": ["RELEASE_DATE", "UPGRADE_WINDOW", "INVALID_LICENSE_URL", "OUTDATED_LICENSE_URL", "PRESET_LICENSE_KEYS", "CSS", "buildLicenseWarning", "isImmuneUrl", "processLicenseKey", "OPTION_REFINERS", "main", "ResourceDataAdder", "ResourceEventConfigAdder", "defs", "ResourceApi", "ResourceSplitter", "config", "OPTION_REFINERS", "ResourceCell", "ResourceDayHeader", "ResourceIndex", "AbstractResourceDayTableModel", "ResourceDayTableModel", "DayResourceTableModel", "VResourceJoiner", "VResourceSplitter", "main", "main_default", "OPTION_REFINERS", "RELEASE_DATE", "UPGRADE_WINDOW", "INVALID_LICENSE_URL", "OUTDATED_LICENSE_URL", "PRESET_LICENSE_KEYS", "CSS", "buildLicenseWarning", "isImmuneUrl", "processLicenseKey", "OPTION_REFINERS", "main", "ResourceDayTableJoiner", "ResourceDayTable", "ResourceDayTableView", "main", "main_default", "ResourceDayTimeColsJoiner", "ResourceDayTimeCols", "ResourceDayTimeColsView", "main", "main_default"]
}
